# Generated by Django 5.1.7 on 2025-05-01 05:59

import django.contrib.postgres.fields
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ("component", "0002_alter_copymessage_content_type_and_more"),
        ("contenttypes", "0002_remove_content_type_name"),
    ]

    operations = [
        migrations.AlterField(
            model_name="addstickertoset",
            name="name",
            field=models.CharField(blank=True, help_text="Sticker set name", null=True),
        ),
        migrations.AlterField(
            model_name="addstickertoset",
            name="user_id",
            field=models.IntegerField(
                blank=True,
                help_text="User identifier of sticker set owner",
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="answerinlinequery",
            name="inline_query_id",
            field=models.CharField(
                blank=True,
                help_text="Unique identifier for the answered query",
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="answerprecheckoutquery",
            name="ok",
            field=models.BooleanField(
                blank=True,
                help_text="Specify True if everything is alright (goods are available, etc.) and the bot is ready to proceed with the order. Use False if there are any problems.",
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="answerprecheckoutquery",
            name="pre_checkout_query_id",
            field=models.CharField(
                blank=True,
                help_text="Unique identifier for the query to be answered",
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="answershippingquery",
            name="ok",
            field=models.BooleanField(
                blank=True,
                help_text="Pass True if delivery to the specified address is possible and False if there are any problems (for example, if delivery to the specified address is not possible)",
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="answershippingquery",
            name="shipping_query_id",
            field=models.CharField(
                blank=True,
                help_text="Unique identifier for the query to be answered",
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="answerwebappquery",
            name="web_app_query_id",
            field=models.CharField(
                blank=True,
                help_text="Unique identifier for the query to be answered",
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="approvechatjoinrequest",
            name="chat_id",
            field=models.CharField(
                blank=True,
                help_text="Unique identifier for the target chat or username of the target channel (in the format @channelusername)",
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="approvechatjoinrequest",
            name="user_id",
            field=models.IntegerField(
                blank=True,
                help_text="Unique identifier of the target user",
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="banchatmember",
            name="chat_id",
            field=models.CharField(
                blank=True,
                help_text="Unique identifier for the target group or username of the target supergroup or channel (in the format @channelusername)",
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="banchatmember",
            name="user_id",
            field=models.IntegerField(
                blank=True,
                help_text="Unique identifier of the target user",
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="banchatsenderchat",
            name="chat_id",
            field=models.CharField(
                blank=True,
                help_text="Unique identifier for the target chat or username of the target channel (in the format @channelusername)",
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="banchatsenderchat",
            name="sender_chat_id",
            field=models.IntegerField(
                blank=True,
                help_text="Unique identifier of the target sender chat",
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="closeforumtopic",
            name="chat_id",
            field=models.CharField(
                blank=True,
                help_text="Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername)",
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="closeforumtopic",
            name="message_thread_id",
            field=models.IntegerField(
                blank=True,
                help_text="Unique identifier for the target message thread of the forum topic",
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="closegeneralforumtopic",
            name="chat_id",
            field=models.CharField(
                blank=True,
                help_text="Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername)",
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="convertgifttostars",
            name="business_connection_id",
            field=models.CharField(
                blank=True,
                help_text="Unique identifier of the business connection",
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="convertgifttostars",
            name="owned_gift_id",
            field=models.CharField(
                blank=True,
                help_text="Unique identifier of the regular gift that should be converted to Telegram Stars",
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="copymessage",
            name="chat_id",
            field=models.CharField(
                blank=True,
                help_text="Unique identifier for the target chat or username of the target channel (in the format @channelusername)",
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="copymessage",
            name="content_type",
            field=models.ForeignKey(
                blank=True,
                help_text="Additional interface options. A JSON-serialized object for an inline keyboard, custom reply keyboard, instructions to remove a reply keyboard or to force a reply from the user",
                limit_choices_to=models.Q(
                    ("model", "inlinekeyboardmarkup"),
                    ("model", "replykeyboardmarkup"),
                    ("model", "replykeyboardremove"),
                    ("model", "forcereply"),
                    _connector="OR",
                ),
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to="contenttypes.contenttype",
            ),
        ),
        migrations.AlterField(
            model_name="copymessage",
            name="from_chat_id",
            field=models.CharField(
                blank=True,
                help_text="Unique identifier for the chat where the original message was sent (or channel username in the format @channelusername)",
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="copymessage",
            name="message_id",
            field=models.IntegerField(
                blank=True,
                help_text="Message identifier in the chat specified in from_chat_id",
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="copymessages",
            name="chat_id",
            field=models.CharField(
                blank=True,
                help_text="Unique identifier for the target chat or username of the target channel (in the format @channelusername)",
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="copymessages",
            name="from_chat_id",
            field=models.CharField(
                blank=True,
                help_text="Unique identifier for the chat where the original messages were sent (or channel username in the format @channelusername)",
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="copymessages",
            name="message_ids",
            field=django.contrib.postgres.fields.ArrayField(
                base_field=models.IntegerField(),
                blank=True,
                default=list,
                help_text="A JSON-serialized list of 1-100 identifiers of messages in the chat from_chat_id to copy. The identifiers must be specified in a strictly increasing order.",
                null=True,
                size=None,
            ),
        ),
        migrations.AlterField(
            model_name="createchatinvitelink",
            name="chat_id",
            field=models.CharField(
                blank=True,
                help_text="Unique identifier for the target chat or username of the target channel (in the format @channelusername)",
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="createchatsubscriptioninvitelink",
            name="chat_id",
            field=models.CharField(
                blank=True,
                help_text="Unique identifier for the target channel chat or username of the target channel (in the format @channelusername)",
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="createchatsubscriptioninvitelink",
            name="subscription_period",
            field=models.IntegerField(
                blank=True,
                help_text="The number of seconds the subscription will be active for before the next payment. Currently, it must always be 2592000 (30 days).",
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="createchatsubscriptioninvitelink",
            name="subscription_price",
            field=models.IntegerField(
                blank=True,
                help_text="The amount of Telegram Stars a user must pay initially and after each subsequent subscription period to be a member of the chat; 1-10000",
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="createforumtopic",
            name="chat_id",
            field=models.CharField(
                blank=True,
                help_text="Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername)",
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="createforumtopic",
            name="name",
            field=models.CharField(
                blank=True,
                help_text="Topic name, 1-128 characters",
                max_length=128,
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="createinvoicelink",
            name="currency",
            field=models.CharField(
                blank=True,
                help_text="Three-letter ISO 4217 currency code, see more on currencies. Pass “XTR” for payments in Telegram Stars.",
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="createinvoicelink",
            name="description",
            field=models.CharField(
                blank=True,
                help_text="Product description, 1-255 characters",
                max_length=255,
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="createinvoicelink",
            name="payload",
            field=models.CharField(
                blank=True,
                help_text="Bot-defined invoice payload, 1-128 bytes. This will not be displayed to the user, use it for your internal processes.",
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="createinvoicelink",
            name="title",
            field=models.CharField(
                blank=True,
                help_text="Product name, 1-32 characters",
                max_length=32,
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="createnewstickerset",
            name="name",
            field=models.CharField(
                blank=True,
                help_text='Short name of sticker set, to be used in t.me/addstickers/ URLs (e.g., animals). Can contain only English letters, digits and underscores. Must begin with a letter, can\'t contain consecutive underscores and must end in "_by_<bot_username>". <bot_username> is case insensitive. 1-64 characters.',
                max_length=64,
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="createnewstickerset",
            name="title",
            field=models.CharField(
                blank=True,
                help_text="Sticker set title, 1-64 characters",
                max_length=64,
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="createnewstickerset",
            name="user_id",
            field=models.IntegerField(
                blank=True,
                help_text="User identifier of created sticker set owner",
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="declinechatjoinrequest",
            name="chat_id",
            field=models.CharField(
                blank=True,
                help_text="Unique identifier for the target chat or username of the target channel (in the format @channelusername)",
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="declinechatjoinrequest",
            name="user_id",
            field=models.IntegerField(
                blank=True,
                help_text="Unique identifier of the target user",
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="deletebusinessmessages",
            name="business_connection_id",
            field=models.CharField(
                blank=True,
                help_text="Unique identifier of the business connection on behalf of which to delete the messages",
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="deletebusinessmessages",
            name="message_ids",
            field=django.contrib.postgres.fields.ArrayField(
                base_field=models.IntegerField(),
                blank=True,
                default=list,
                help_text="A JSON-serialized list of 1-100 identifiers of messages to delete. All messages must be from the same chat. See deleteMessage for limitations on which messages can be deleted",
                null=True,
                size=None,
            ),
        ),
        migrations.AlterField(
            model_name="deletechatphoto",
            name="chat_id",
            field=models.CharField(
                blank=True,
                help_text="Unique identifier for the target chat or username of the target channel (in the format @channelusername)",
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="deletechatstickerset",
            name="chat_id",
            field=models.CharField(
                blank=True,
                help_text="Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername)",
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="deleteforumtopic",
            name="chat_id",
            field=models.CharField(
                blank=True,
                help_text="Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername)",
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="deleteforumtopic",
            name="message_thread_id",
            field=models.IntegerField(
                blank=True,
                help_text="Unique identifier for the target message thread of the forum topic",
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="deletemessage",
            name="chat_id",
            field=models.CharField(
                blank=True,
                help_text="Unique identifier for the target chat or username of the target channel (in the format @channelusername)",
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="deletemessage",
            name="message_id",
            field=models.IntegerField(
                blank=True,
                help_text="Identifier of the message to delete",
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="deletemessages",
            name="chat_id",
            field=models.CharField(
                blank=True,
                help_text="Unique identifier for the target chat or username of the target channel (in the format @channelusername)",
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="deletemessages",
            name="message_ids",
            field=django.contrib.postgres.fields.ArrayField(
                base_field=models.IntegerField(),
                blank=True,
                default=list,
                help_text="A JSON-serialized list of 1-100 identifiers of messages to delete. See deleteMessage for limitations on which messages can be deleted",
                null=True,
                size=None,
            ),
        ),
        migrations.AlterField(
            model_name="deletestickerfromset",
            name="sticker",
            field=models.CharField(
                blank=True,
                help_text="File identifier of the sticker",
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="deletestickerset",
            name="name",
            field=models.CharField(blank=True, help_text="Sticker set name", null=True),
        ),
        migrations.AlterField(
            model_name="deletestory",
            name="business_connection_id",
            field=models.CharField(
                blank=True,
                help_text="Unique identifier of the business connection",
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="deletestory",
            name="story_id",
            field=models.IntegerField(
                blank=True,
                help_text="Unique identifier of the story to delete",
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="editchatinvitelink",
            name="chat_id",
            field=models.CharField(
                blank=True,
                help_text="Unique identifier for the target chat or username of the target channel (in the format @channelusername)",
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="editchatinvitelink",
            name="invite_link",
            field=models.CharField(
                blank=True,
                help_text="The invite link to edit",
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="editchatsubscriptioninvitelink",
            name="chat_id",
            field=models.CharField(
                blank=True,
                help_text="Unique identifier for the target chat or username of the target channel (in the format @channelusername)",
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="editchatsubscriptioninvitelink",
            name="invite_link",
            field=models.CharField(
                blank=True,
                help_text="The invite link to edit",
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="editforumtopic",
            name="chat_id",
            field=models.CharField(
                blank=True,
                help_text="Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername)",
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="editforumtopic",
            name="message_thread_id",
            field=models.IntegerField(
                blank=True,
                help_text="Unique identifier for the target message thread of the forum topic",
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="editgeneralforumtopic",
            name="chat_id",
            field=models.CharField(
                blank=True,
                help_text="Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername)",
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="editgeneralforumtopic",
            name="name",
            field=models.CharField(
                blank=True,
                help_text="New topic name, 1-128 characters",
                max_length=128,
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="editmessagecaption",
            name="content_type",
            field=models.ForeignKey(
                blank=True,
                help_text="A JSON-serialized object for an inline keyboard.",
                limit_choices_to=models.Q(("model", "inlinekeyboardmarkup")),
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to="contenttypes.contenttype",
            ),
        ),
        migrations.AlterField(
            model_name="editmessagelivelocation",
            name="content_type",
            field=models.ForeignKey(
                blank=True,
                help_text="A JSON-serialized object for a new inline keyboard.",
                limit_choices_to=models.Q(("model", "inlinekeyboardmarkup")),
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to="contenttypes.contenttype",
            ),
        ),
        migrations.AlterField(
            model_name="editmessagelivelocation",
            name="latitude",
            field=models.FloatField(
                blank=True,
                help_text="Latitude of new location",
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="editmessagelivelocation",
            name="longitude",
            field=models.FloatField(
                blank=True,
                help_text="Longitude of new location",
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="editmessagemedia",
            name="content_type",
            field=models.ForeignKey(
                blank=True,
                help_text="A JSON-serialized object for a new inline keyboard.",
                limit_choices_to=models.Q(("model", "inlinekeyboardmarkup")),
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to="contenttypes.contenttype",
            ),
        ),
        migrations.AlterField(
            model_name="editmessagereplymarkup",
            name="content_type",
            field=models.ForeignKey(
                blank=True,
                help_text="A JSON-serialized object for an inline keyboard.",
                limit_choices_to=models.Q(("model", "inlinekeyboardmarkup")),
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to="contenttypes.contenttype",
            ),
        ),
        migrations.AlterField(
            model_name="editmessagetext",
            name="content_type",
            field=models.ForeignKey(
                blank=True,
                help_text="A JSON-serialized object for an inline keyboard.",
                limit_choices_to=models.Q(("model", "inlinekeyboardmarkup")),
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to="contenttypes.contenttype",
            ),
        ),
        migrations.AlterField(
            model_name="editmessagetext",
            name="text",
            field=models.CharField(
                blank=True,
                help_text="New text of the message, 1-4096 characters after entities parsing",
                max_length=4096,
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="editstory",
            name="business_connection_id",
            field=models.CharField(
                blank=True,
                help_text="Unique identifier of the business connection",
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="editstory",
            name="story_id",
            field=models.IntegerField(
                blank=True,
                help_text="Unique identifier of the story to edit",
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="edituserstarsubscription",
            name="is_canceled",
            field=models.BooleanField(
                blank=True,
                help_text="Pass True to cancel extension of the user subscription; the subscription must be active up to the end of the current subscription period. Pass False to allow the user to re-enable a subscription that was previously canceled by the bot.",
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="edituserstarsubscription",
            name="telegram_payment_charge_id",
            field=models.CharField(
                blank=True,
                help_text="Telegram payment identifier for the subscription",
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="edituserstarsubscription",
            name="user_id",
            field=models.IntegerField(
                blank=True,
                help_text="Identifier of the user whose subscription will be edited",
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="exportchatinvitelink",
            name="chat_id",
            field=models.CharField(
                blank=True,
                help_text="Unique identifier for the target chat or username of the target channel (in the format @channelusername)",
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="forwardmessage",
            name="chat_id",
            field=models.CharField(
                blank=True,
                help_text="Unique identifier for the target chat or username of the target channel (in the format @channelusername)",
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="forwardmessage",
            name="from_chat_id",
            field=models.CharField(
                blank=True,
                help_text="Unique identifier for the chat where the original message was sent (or channel username in the format @channelusername)",
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="forwardmessage",
            name="message_id",
            field=models.IntegerField(
                blank=True,
                help_text="Message identifier in the chat specified in from_chat_id",
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="forwardmessages",
            name="chat_id",
            field=models.CharField(
                blank=True,
                help_text="Unique identifier for the target chat or username of the target channel (in the format @channelusername)",
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="forwardmessages",
            name="from_chat_id",
            field=models.CharField(
                blank=True,
                help_text="Unique identifier for the chat where the original messages were sent (or channel username in the format @channelusername)",
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="forwardmessages",
            name="message_ids",
            field=django.contrib.postgres.fields.ArrayField(
                base_field=models.IntegerField(),
                blank=True,
                default=list,
                help_text="A JSON-serialized list of 1-100 identifiers of messages in the chat from_chat_id to forward. The identifiers must be specified in a strictly increasing order.",
                null=True,
                size=None,
            ),
        ),
        migrations.AlterField(
            model_name="getbusinessaccountgifts",
            name="business_connection_id",
            field=models.CharField(
                blank=True,
                help_text="Unique identifier of the business connection",
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="getbusinessaccountstarbalance",
            name="business_connection_id",
            field=models.CharField(
                blank=True,
                help_text="Unique identifier of the business connection",
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="getbusinessconnection",
            name="business_connection_id",
            field=models.CharField(
                blank=True,
                help_text="Unique identifier of the business connection",
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="getchat",
            name="chat_id",
            field=models.CharField(
                blank=True,
                help_text="Unique identifier for the target chat or username of the target supergroup or channel (in the format @channelusername)",
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="getchatadministrators",
            name="chat_id",
            field=models.CharField(
                blank=True,
                help_text="Unique identifier for the target chat or username of the target supergroup or channel (in the format @channelusername)",
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="getchatmember",
            name="chat_id",
            field=models.CharField(
                blank=True,
                help_text="Unique identifier for the target chat or username of the target supergroup or channel (in the format @channelusername)",
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="getchatmember",
            name="user_id",
            field=models.IntegerField(
                blank=True,
                help_text="Unique identifier of the target user",
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="getchatmembercount",
            name="chat_id",
            field=models.CharField(
                blank=True,
                help_text="Unique identifier for the target chat or username of the target supergroup or channel (in the format @channelusername)",
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="getcustomemojistickers",
            name="custom_emoji_ids",
            field=django.contrib.postgres.fields.ArrayField(
                base_field=models.CharField(),
                blank=True,
                default=list,
                help_text="A JSON-serialized list of custom emoji identifiers. At most 200 custom emoji identifiers can be specified.",
                null=True,
                size=None,
            ),
        ),
        migrations.AlterField(
            model_name="getfile",
            name="file_id",
            field=models.CharField(
                blank=True,
                help_text="File identifier to get information about",
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="getstickerset",
            name="name",
            field=models.CharField(
                blank=True,
                help_text="Name of the sticker set",
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="getuserchatboosts",
            name="chat_id",
            field=models.CharField(
                blank=True,
                help_text="Unique identifier for the chat or username of the channel (in the format @channelusername)",
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="getuserchatboosts",
            name="user_id",
            field=models.IntegerField(
                blank=True,
                help_text="Unique identifier of the target user",
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="getuserprofilephotos",
            name="user_id",
            field=models.IntegerField(
                blank=True,
                help_text="Unique identifier of the target user",
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="giftpremiumsubscription",
            name="month_count",
            field=models.IntegerField(
                blank=True,
                help_text="Number of months the Telegram Premium subscription will be active for the user; must be one of 3, 6, or 12",
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="giftpremiumsubscription",
            name="star_count",
            field=models.IntegerField(
                blank=True,
                help_text="Number of Telegram Stars to pay for the Telegram Premium subscription; must be 1000 for 3 months, 1500 for 6 months, and 2500 for 12 months",
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="giftpremiumsubscription",
            name="user_id",
            field=models.IntegerField(
                blank=True,
                help_text="Unique identifier of the target user who will receive a Telegram Premium subscription",
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="hidegeneralforumtopic",
            name="chat_id",
            field=models.CharField(
                blank=True,
                help_text="Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername)",
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="leavechat",
            name="chat_id",
            field=models.CharField(
                blank=True,
                help_text="Unique identifier for the target chat or username of the target supergroup or channel (in the format @channelusername)",
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="pinchatmessage",
            name="chat_id",
            field=models.CharField(
                blank=True,
                help_text="Unique identifier for the target chat or username of the target channel (in the format @channelusername)",
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="pinchatmessage",
            name="message_id",
            field=models.IntegerField(
                blank=True,
                help_text="Identifier of a message to pin",
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="poststory",
            name="active_period",
            field=models.IntegerField(
                blank=True,
                help_text="Period after which the story is moved to the archive, in seconds; must be one of 6 * 3600, 12 * 3600, 86400, or 2 * 86400",
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="poststory",
            name="business_connection_id",
            field=models.CharField(
                blank=True,
                help_text="Unique identifier of the business connection",
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="promotechatmember",
            name="chat_id",
            field=models.CharField(
                blank=True,
                help_text="Unique identifier for the target chat or username of the target channel (in the format @channelusername)",
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="promotechatmember",
            name="user_id",
            field=models.IntegerField(
                blank=True,
                help_text="Unique identifier of the target user",
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="readbusinessmessage",
            name="business_connection_id",
            field=models.CharField(
                blank=True,
                help_text="Unique identifier of the business connection on behalf of which to read the message",
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="readbusinessmessage",
            name="chat_id",
            field=models.IntegerField(
                blank=True,
                help_text="Unique identifier of the chat in which the message was received. The chat must have been active in the last 24 hours.",
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="readbusinessmessage",
            name="message_id",
            field=models.IntegerField(
                blank=True,
                help_text="Unique identifier of the message to mark as read",
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="refundstarpayment",
            name="telegram_payment_charge_id",
            field=models.CharField(
                blank=True,
                help_text="Telegram payment identifier",
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="refundstarpayment",
            name="user_id",
            field=models.IntegerField(
                blank=True,
                help_text="Identifier of the user whose payment will be refunded",
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="removebusinessaccountprofilephoto",
            name="business_connection_id",
            field=models.CharField(
                blank=True,
                help_text="Unique identifier of the business connection",
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="removechatverification",
            name="chat_id",
            field=models.CharField(
                blank=True,
                help_text="Unique identifier for the target chat or username of the target channel (in the format @channelusername)",
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="removeuserverification",
            name="user_id",
            field=models.IntegerField(
                blank=True,
                help_text="Unique identifier of the target user",
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="reopenforumtopic",
            name="chat_id",
            field=models.CharField(
                blank=True,
                help_text="Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername)",
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="reopenforumtopic",
            name="message_thread_id",
            field=models.IntegerField(
                blank=True,
                help_text="Unique identifier for the target message thread of the forum topic",
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="reopengeneralforumtopic",
            name="chat_id",
            field=models.CharField(
                blank=True,
                help_text="Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername)",
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="replacestickerinset",
            name="name",
            field=models.CharField(blank=True, help_text="Sticker set name", null=True),
        ),
        migrations.AlterField(
            model_name="replacestickerinset",
            name="old_sticker",
            field=models.CharField(
                blank=True,
                help_text="File identifier of the replaced sticker",
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="replacestickerinset",
            name="user_id",
            field=models.IntegerField(
                blank=True,
                help_text="User identifier of the sticker set owner",
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="restrictchatmember",
            name="chat_id",
            field=models.CharField(
                blank=True,
                help_text="Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername)",
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="restrictchatmember",
            name="user_id",
            field=models.IntegerField(
                blank=True,
                help_text="Unique identifier of the target user",
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="revokechatinvitelink",
            name="chat_id",
            field=models.CharField(
                blank=True,
                help_text="Unique identifier of the target chat or username of the target channel (in the format @channelusername)",
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="revokechatinvitelink",
            name="invite_link",
            field=models.CharField(
                blank=True,
                help_text="The invite link to revoke",
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="savepreparedinlinemessage",
            name="user_id",
            field=models.IntegerField(
                blank=True,
                help_text="Unique identifier of the target user that can use the prepared message",
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="sendanimation",
            name="animation",
            field=models.FileField(
                blank=True,
                help_text="Animation to send. Pass a file_id as String to send an animation that exists on the Telegram servers (recommended), pass an HTTP URL as a String for Telegram to get an animation from the Internet, or upload a new animation using multipart/form-data. More information on Sending Files »",
                null=True,
                upload_to="animation/",
            ),
        ),
        migrations.AlterField(
            model_name="sendanimation",
            name="chat_id",
            field=models.CharField(
                blank=True,
                help_text="Unique identifier for the target chat or username of the target channel (in the format @channelusername)",
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="sendanimation",
            name="content_type",
            field=models.ForeignKey(
                blank=True,
                help_text="Additional interface options. A JSON-serialized object for an inline keyboard, custom reply keyboard, instructions to remove a reply keyboard or to force a reply from the user",
                limit_choices_to=models.Q(
                    ("model", "inlinekeyboardmarkup"),
                    ("model", "replykeyboardmarkup"),
                    ("model", "replykeyboardremove"),
                    ("model", "forcereply"),
                    _connector="OR",
                ),
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to="contenttypes.contenttype",
            ),
        ),
        migrations.AlterField(
            model_name="sendcontact",
            name="chat_id",
            field=models.CharField(
                blank=True,
                help_text="Unique identifier for the target chat or username of the target channel (in the format @channelusername)",
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="sendcontact",
            name="content_type",
            field=models.ForeignKey(
                blank=True,
                help_text="Additional interface options. A JSON-serialized object for an inline keyboard, custom reply keyboard, instructions to remove a reply keyboard or to force a reply from the user",
                limit_choices_to=models.Q(
                    ("model", "inlinekeyboardmarkup"),
                    ("model", "replykeyboardmarkup"),
                    ("model", "replykeyboardremove"),
                    ("model", "forcereply"),
                    _connector="OR",
                ),
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to="contenttypes.contenttype",
            ),
        ),
        migrations.AlterField(
            model_name="sendcontact",
            name="first_name",
            field=models.CharField(
                blank=True,
                help_text="Contact's first name",
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="sendcontact",
            name="phone_number",
            field=models.CharField(
                blank=True,
                help_text="Contact's phone number",
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="senddice",
            name="chat_id",
            field=models.CharField(
                blank=True,
                help_text="Unique identifier for the target chat or username of the target channel (in the format @channelusername)",
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="senddice",
            name="content_type",
            field=models.ForeignKey(
                blank=True,
                help_text="Additional interface options. A JSON-serialized object for an inline keyboard, custom reply keyboard, instructions to remove a reply keyboard or to force a reply from the user",
                limit_choices_to=models.Q(
                    ("model", "inlinekeyboardmarkup"),
                    ("model", "replykeyboardmarkup"),
                    ("model", "replykeyboardremove"),
                    ("model", "forcereply"),
                    _connector="OR",
                ),
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to="contenttypes.contenttype",
            ),
        ),
        migrations.AlterField(
            model_name="senddocument",
            name="chat_id",
            field=models.CharField(
                blank=True,
                help_text="Unique identifier for the target chat or username of the target channel (in the format @channelusername)",
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="senddocument",
            name="content_type",
            field=models.ForeignKey(
                blank=True,
                help_text="Additional interface options. A JSON-serialized object for an inline keyboard, custom reply keyboard, instructions to remove a reply keyboard or to force a reply from the user",
                limit_choices_to=models.Q(
                    ("model", "inlinekeyboardmarkup"),
                    ("model", "replykeyboardmarkup"),
                    ("model", "replykeyboardremove"),
                    ("model", "forcereply"),
                    _connector="OR",
                ),
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to="contenttypes.contenttype",
            ),
        ),
        migrations.AlterField(
            model_name="senddocument",
            name="document",
            field=models.FileField(
                blank=True,
                help_text="File to send. Pass a file_id as String to send a file that exists on the Telegram servers (recommended), pass an HTTP URL as a String for Telegram to get a file from the Internet, or upload a new one using multipart/form-data. More information on Sending Files »",
                null=True,
                upload_to="document/",
            ),
        ),
        migrations.AlterField(
            model_name="sendgame",
            name="chat_id",
            field=models.IntegerField(
                blank=True,
                help_text="Unique identifier for the target chat",
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="sendgame",
            name="content_type",
            field=models.ForeignKey(
                blank=True,
                help_text="A JSON-serialized object for an inline keyboard. If empty, one 'Play game_title' button will be shown. If not empty, the first button must launch the game.",
                limit_choices_to=models.Q(("model", "inlinekeyboardmarkup")),
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to="contenttypes.contenttype",
            ),
        ),
        migrations.AlterField(
            model_name="sendgame",
            name="game_short_name",
            field=models.CharField(
                blank=True,
                help_text="Short name of the game, serves as the unique identifier for the game. Set up your games via @BotFather.",
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="sendgift",
            name="gift_id",
            field=models.CharField(
                blank=True,
                help_text="Identifier of the gift",
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="sendinvoice",
            name="chat_id",
            field=models.CharField(
                blank=True,
                help_text="Unique identifier for the target chat or username of the target channel (in the format @channelusername)",
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="sendinvoice",
            name="content_type",
            field=models.ForeignKey(
                blank=True,
                help_text="A JSON-serialized object for an inline keyboard. If empty, one 'Pay total price' button will be shown. If not empty, the first button must be a Pay button.",
                limit_choices_to=models.Q(("model", "inlinekeyboardmarkup")),
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to="contenttypes.contenttype",
            ),
        ),
        migrations.AlterField(
            model_name="sendinvoice",
            name="currency",
            field=models.CharField(
                blank=True,
                help_text="Three-letter ISO 4217 currency code, see more on currencies. Pass “XTR” for payments in Telegram Stars.",
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="sendinvoice",
            name="description",
            field=models.CharField(
                blank=True,
                help_text="Product description, 1-255 characters",
                max_length=255,
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="sendinvoice",
            name="payload",
            field=models.CharField(
                blank=True,
                help_text="Bot-defined invoice payload, 1-128 bytes. This will not be displayed to the user, use it for your internal processes.",
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="sendinvoice",
            name="title",
            field=models.CharField(
                blank=True,
                help_text="Product name, 1-32 characters",
                max_length=32,
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="sendlocation",
            name="chat_id",
            field=models.CharField(
                blank=True,
                help_text="Unique identifier for the target chat or username of the target channel (in the format @channelusername)",
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="sendlocation",
            name="content_type",
            field=models.ForeignKey(
                blank=True,
                help_text="Additional interface options. A JSON-serialized object for an inline keyboard, custom reply keyboard, instructions to remove a reply keyboard or to force a reply from the user",
                limit_choices_to=models.Q(
                    ("model", "inlinekeyboardmarkup"),
                    ("model", "replykeyboardmarkup"),
                    ("model", "replykeyboardremove"),
                    ("model", "forcereply"),
                    _connector="OR",
                ),
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to="contenttypes.contenttype",
            ),
        ),
        migrations.AlterField(
            model_name="sendlocation",
            name="latitude",
            field=models.FloatField(
                blank=True,
                help_text="Latitude of the location",
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="sendlocation",
            name="longitude",
            field=models.FloatField(
                blank=True,
                help_text="Longitude of the location",
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="sendmediagroup",
            name="chat_id",
            field=models.CharField(
                blank=True,
                help_text="Unique identifier for the target chat or username of the target channel (in the format @channelusername)",
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="sendmessage",
            name="chat_id",
            field=models.CharField(
                blank=True,
                help_text="Unique identifier for the target chat or username of the target channel (in the format @channelusername)",
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="sendmessage",
            name="content_type",
            field=models.ForeignKey(
                blank=True,
                help_text="Additional interface options. A JSON-serialized object for an inline keyboard, custom reply keyboard, instructions to remove a reply keyboard or to force a reply from the user",
                limit_choices_to=models.Q(
                    ("model", "inlinekeyboardmarkup"),
                    ("model", "replykeyboardmarkup"),
                    ("model", "replykeyboardremove"),
                    ("model", "forcereply"),
                    _connector="OR",
                ),
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to="contenttypes.contenttype",
            ),
        ),
        migrations.AlterField(
            model_name="sendmessage",
            name="text",
            field=models.CharField(
                blank=True,
                help_text="Text of the message to be sent, 1-4096 characters after entities parsing",
                max_length=4096,
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="sendpaidmedia",
            name="chat_id",
            field=models.CharField(
                blank=True,
                help_text="Unique identifier for the target chat or username of the target channel (in the format @channelusername). If the chat is a channel, all Telegram Star proceeds from this media will be credited to the chat's balance. Otherwise, they will be credited to the bot's balance.",
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="sendpaidmedia",
            name="content_type",
            field=models.ForeignKey(
                blank=True,
                help_text="Additional interface options. A JSON-serialized object for an inline keyboard, custom reply keyboard, instructions to remove a reply keyboard or to force a reply from the user",
                limit_choices_to=models.Q(
                    ("model", "inlinekeyboardmarkup"),
                    ("model", "replykeyboardmarkup"),
                    ("model", "replykeyboardremove"),
                    ("model", "forcereply"),
                    _connector="OR",
                ),
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to="contenttypes.contenttype",
            ),
        ),
        migrations.AlterField(
            model_name="sendpaidmedia",
            name="star_count",
            field=models.IntegerField(
                blank=True,
                help_text="The number of Telegram Stars that must be paid to buy access to the media; 1-10000",
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="sendphoto",
            name="chat_id",
            field=models.CharField(
                blank=True,
                help_text="Unique identifier for the target chat or username of the target channel (in the format @channelusername)",
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="sendphoto",
            name="content_type",
            field=models.ForeignKey(
                blank=True,
                help_text="Additional interface options. A JSON-serialized object for an inline keyboard, custom reply keyboard, instructions to remove a reply keyboard or to force a reply from the user",
                limit_choices_to=models.Q(
                    ("model", "inlinekeyboardmarkup"),
                    ("model", "replykeyboardmarkup"),
                    ("model", "replykeyboardremove"),
                    ("model", "forcereply"),
                    _connector="OR",
                ),
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to="contenttypes.contenttype",
            ),
        ),
        migrations.AlterField(
            model_name="sendphoto",
            name="photo",
            field=models.FileField(
                blank=True,
                help_text="Photo to send. Pass a file_id as String to send a photo that exists on the Telegram servers (recommended), pass an HTTP URL as a String for Telegram to get a photo from the Internet, or upload a new photo using multipart/form-data. The photo must be at most 10 MB in size. The photo's width and height must not exceed 10000 in total. Width and height ratio must be at most 20. More information on Sending Files »",
                null=True,
                upload_to="photo/",
            ),
        ),
        migrations.AlterField(
            model_name="sendpoll",
            name="chat_id",
            field=models.CharField(
                blank=True,
                help_text="Unique identifier for the target chat or username of the target channel (in the format @channelusername)",
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="sendpoll",
            name="content_type",
            field=models.ForeignKey(
                blank=True,
                help_text="Additional interface options. A JSON-serialized object for an inline keyboard, custom reply keyboard, instructions to remove a reply keyboard or to force a reply from the user",
                limit_choices_to=models.Q(
                    ("model", "inlinekeyboardmarkup"),
                    ("model", "replykeyboardmarkup"),
                    ("model", "replykeyboardremove"),
                    ("model", "forcereply"),
                    _connector="OR",
                ),
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to="contenttypes.contenttype",
            ),
        ),
        migrations.AlterField(
            model_name="sendpoll",
            name="question",
            field=models.CharField(
                blank=True,
                help_text="Poll question, 1-300 characters",
                max_length=300,
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="sendsticker",
            name="chat_id",
            field=models.CharField(
                blank=True,
                help_text="Unique identifier for the target chat or username of the target channel (in the format @channelusername)",
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="sendsticker",
            name="content_type",
            field=models.ForeignKey(
                blank=True,
                help_text="Additional interface options. A JSON-serialized object for an inline keyboard, custom reply keyboard, instructions to remove a reply keyboard or to force a reply from the user",
                limit_choices_to=models.Q(
                    ("model", "inlinekeyboardmarkup"),
                    ("model", "replykeyboardmarkup"),
                    ("model", "replykeyboardremove"),
                    ("model", "forcereply"),
                    _connector="OR",
                ),
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to="contenttypes.contenttype",
            ),
        ),
        migrations.AlterField(
            model_name="sendsticker",
            name="sticker",
            field=models.FileField(
                blank=True,
                help_text="Sticker to send. Pass a file_id as String to send a file that exists on the Telegram servers (recommended), pass an HTTP URL as a String for Telegram to get a .WEBP sticker from the Internet, or upload a new .WEBP, .TGS, or .WEBM sticker using multipart/form-data. More information on Sending Files ». Video and animated stickers can't be sent via an HTTP URL.",
                null=True,
                upload_to="sticker/",
            ),
        ),
        migrations.AlterField(
            model_name="sendvenue",
            name="address",
            field=models.CharField(
                blank=True,
                help_text="Address of the venue",
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="sendvenue",
            name="chat_id",
            field=models.CharField(
                blank=True,
                help_text="Unique identifier for the target chat or username of the target channel (in the format @channelusername)",
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="sendvenue",
            name="content_type",
            field=models.ForeignKey(
                blank=True,
                help_text="Additional interface options. A JSON-serialized object for an inline keyboard, custom reply keyboard, instructions to remove a reply keyboard or to force a reply from the user",
                limit_choices_to=models.Q(
                    ("model", "inlinekeyboardmarkup"),
                    ("model", "replykeyboardmarkup"),
                    ("model", "replykeyboardremove"),
                    ("model", "forcereply"),
                    _connector="OR",
                ),
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to="contenttypes.contenttype",
            ),
        ),
        migrations.AlterField(
            model_name="sendvenue",
            name="latitude",
            field=models.FloatField(
                blank=True,
                help_text="Latitude of the venue",
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="sendvenue",
            name="longitude",
            field=models.FloatField(
                blank=True,
                help_text="Longitude of the venue",
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="sendvenue",
            name="title",
            field=models.CharField(
                blank=True,
                help_text="Name of the venue",
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="sendvideo",
            name="chat_id",
            field=models.CharField(
                blank=True,
                help_text="Unique identifier for the target chat or username of the target channel (in the format @channelusername)",
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="sendvideo",
            name="content_type",
            field=models.ForeignKey(
                blank=True,
                help_text="Additional interface options. A JSON-serialized object for an inline keyboard, custom reply keyboard, instructions to remove a reply keyboard or to force a reply from the user",
                limit_choices_to=models.Q(
                    ("model", "inlinekeyboardmarkup"),
                    ("model", "replykeyboardmarkup"),
                    ("model", "replykeyboardremove"),
                    ("model", "forcereply"),
                    _connector="OR",
                ),
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to="contenttypes.contenttype",
            ),
        ),
        migrations.AlterField(
            model_name="sendvideo",
            name="video",
            field=models.FileField(
                blank=True,
                help_text="Video to send. Pass a file_id as String to send a video that exists on the Telegram servers (recommended), pass an HTTP URL as a String for Telegram to get a video from the Internet, or upload a new video using multipart/form-data. More information on Sending Files »",
                null=True,
                upload_to="video/",
            ),
        ),
        migrations.AlterField(
            model_name="sendvideonote",
            name="chat_id",
            field=models.CharField(
                blank=True,
                help_text="Unique identifier for the target chat or username of the target channel (in the format @channelusername)",
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="sendvideonote",
            name="content_type",
            field=models.ForeignKey(
                blank=True,
                help_text="Additional interface options. A JSON-serialized object for an inline keyboard, custom reply keyboard, instructions to remove a reply keyboard or to force a reply from the user",
                limit_choices_to=models.Q(
                    ("model", "inlinekeyboardmarkup"),
                    ("model", "replykeyboardmarkup"),
                    ("model", "replykeyboardremove"),
                    ("model", "forcereply"),
                    _connector="OR",
                ),
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to="contenttypes.contenttype",
            ),
        ),
        migrations.AlterField(
            model_name="sendvideonote",
            name="video_note",
            field=models.FileField(
                blank=True,
                help_text="Video note to send. Pass a file_id as String to send a video note that exists on the Telegram servers (recommended) or upload a new video using multipart/form-data. More information on Sending Files ». Sending video notes by a URL is currently unsupported",
                null=True,
                upload_to="video_note/",
            ),
        ),
        migrations.AlterField(
            model_name="sendvoice",
            name="chat_id",
            field=models.CharField(
                blank=True,
                help_text="Unique identifier for the target chat or username of the target channel (in the format @channelusername)",
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="sendvoice",
            name="content_type",
            field=models.ForeignKey(
                blank=True,
                help_text="Additional interface options. A JSON-serialized object for an inline keyboard, custom reply keyboard, instructions to remove a reply keyboard or to force a reply from the user",
                limit_choices_to=models.Q(
                    ("model", "inlinekeyboardmarkup"),
                    ("model", "replykeyboardmarkup"),
                    ("model", "replykeyboardremove"),
                    ("model", "forcereply"),
                    _connector="OR",
                ),
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to="contenttypes.contenttype",
            ),
        ),
        migrations.AlterField(
            model_name="sendvoice",
            name="voice",
            field=models.FileField(
                blank=True,
                help_text="Audio file to send. Pass a file_id as String to send a file that exists on the Telegram servers (recommended), pass an HTTP URL as a String for Telegram to get a file from the Internet, or upload a new one using multipart/form-data. More information on Sending Files »",
                null=True,
                upload_to="voice/",
            ),
        ),
        migrations.AlterField(
            model_name="setbusinessaccountbio",
            name="business_connection_id",
            field=models.CharField(
                blank=True,
                help_text="Unique identifier of the business connection",
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="setbusinessaccountgiftsettings",
            name="business_connection_id",
            field=models.CharField(
                blank=True,
                help_text="Unique identifier of the business connection",
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="setbusinessaccountgiftsettings",
            name="show_gift_button",
            field=models.BooleanField(
                blank=True,
                help_text="Pass True, if a button for sending a gift to the user or by the business account must always be shown in the input field",
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="setbusinessaccountname",
            name="business_connection_id",
            field=models.CharField(
                blank=True,
                help_text="Unique identifier of the business connection",
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="setbusinessaccountname",
            name="first_name",
            field=models.CharField(
                blank=True,
                help_text="The new value of the first name for the business account; 1-64 characters",
                max_length=64,
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="setbusinessaccountprofilephoto",
            name="business_connection_id",
            field=models.CharField(
                blank=True,
                help_text="Unique identifier of the business connection",
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="setbusinessaccountusername",
            name="business_connection_id",
            field=models.CharField(
                blank=True,
                help_text="Unique identifier of the business connection",
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="setchatadministratorcustomtitle",
            name="chat_id",
            field=models.CharField(
                blank=True,
                help_text="Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername)",
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="setchatadministratorcustomtitle",
            name="custom_title",
            field=models.CharField(
                blank=True,
                help_text="New custom title for the administrator; 0-16 characters, emoji are not allowed",
                max_length=16,
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="setchatadministratorcustomtitle",
            name="user_id",
            field=models.IntegerField(
                blank=True,
                help_text="Unique identifier of the target user",
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="setchatdescription",
            name="chat_id",
            field=models.CharField(
                blank=True,
                help_text="Unique identifier for the target chat or username of the target channel (in the format @channelusername)",
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="setchatpermissions",
            name="chat_id",
            field=models.CharField(
                blank=True,
                help_text="Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername)",
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="setchatphoto",
            name="chat_id",
            field=models.CharField(
                blank=True,
                help_text="Unique identifier for the target chat or username of the target channel (in the format @channelusername)",
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="setchatstickerset",
            name="chat_id",
            field=models.CharField(
                blank=True,
                help_text="Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername)",
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="setchatstickerset",
            name="sticker_set_name",
            field=models.CharField(
                blank=True,
                help_text="Name of the sticker set to be set as the group sticker set",
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="setchattitle",
            name="chat_id",
            field=models.CharField(
                blank=True,
                help_text="Unique identifier for the target chat or username of the target channel (in the format @channelusername)",
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="setchattitle",
            name="title",
            field=models.CharField(
                blank=True,
                help_text="New chat title, 1-128 characters",
                max_length=128,
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="setcustomemojistickersetthumbnail",
            name="name",
            field=models.CharField(blank=True, help_text="Sticker set name", null=True),
        ),
        migrations.AlterField(
            model_name="setgamescore",
            name="score",
            field=models.IntegerField(
                blank=True,
                help_text="New score, must be non-negative",
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="setgamescore",
            name="user_id",
            field=models.IntegerField(
                blank=True,
                help_text="User identifier",
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="setmessagereaction",
            name="chat_id",
            field=models.CharField(
                blank=True,
                help_text="Unique identifier for the target chat or username of the target channel (in the format @channelusername)",
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="setmessagereaction",
            name="message_id",
            field=models.IntegerField(
                blank=True,
                help_text="Identifier of the target message. If the message belongs to a media group, the reaction is set to the first non-deleted message in the group instead.",
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="setstickeremojilist",
            name="emoji_list",
            field=django.contrib.postgres.fields.ArrayField(
                base_field=models.CharField(),
                blank=True,
                default=list,
                help_text="A JSON-serialized list of 1-20 emoji associated with the sticker",
                null=True,
                size=None,
            ),
        ),
        migrations.AlterField(
            model_name="setstickeremojilist",
            name="sticker",
            field=models.CharField(
                blank=True,
                help_text="File identifier of the sticker",
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="setstickerkeywords",
            name="sticker",
            field=models.CharField(
                blank=True,
                help_text="File identifier of the sticker",
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="setstickermaskposition",
            name="sticker",
            field=models.CharField(
                blank=True,
                help_text="File identifier of the sticker",
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="setstickerpositioninset",
            name="position",
            field=models.IntegerField(
                blank=True,
                help_text="New sticker position in the set, zero-based",
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="setstickerpositioninset",
            name="sticker",
            field=models.CharField(
                blank=True,
                help_text="File identifier of the sticker",
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="setstickersetthumbnail",
            name="format",
            field=models.CharField(
                blank=True,
                help_text="Format of the thumbnail, must be one of “static” for a .WEBP or .PNG image, “animated” for a .TGS animation, or “video” for a .WEBM video",
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="setstickersetthumbnail",
            name="name",
            field=models.CharField(blank=True, help_text="Sticker set name", null=True),
        ),
        migrations.AlterField(
            model_name="setstickersetthumbnail",
            name="user_id",
            field=models.IntegerField(
                blank=True,
                help_text="User identifier of the sticker set owner",
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="setstickersettitle",
            name="name",
            field=models.CharField(blank=True, help_text="Sticker set name", null=True),
        ),
        migrations.AlterField(
            model_name="setstickersettitle",
            name="title",
            field=models.CharField(
                blank=True,
                help_text="Sticker set title, 1-64 characters",
                max_length=64,
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="setuseremojistatus",
            name="user_id",
            field=models.IntegerField(
                blank=True,
                help_text="Unique identifier of the target user",
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="stopmessagelivelocation",
            name="content_type",
            field=models.ForeignKey(
                blank=True,
                help_text="A JSON-serialized object for a new inline keyboard.",
                limit_choices_to=models.Q(("model", "inlinekeyboardmarkup")),
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to="contenttypes.contenttype",
            ),
        ),
        migrations.AlterField(
            model_name="stoppoll",
            name="chat_id",
            field=models.CharField(
                blank=True,
                help_text="Unique identifier for the target chat or username of the target channel (in the format @channelusername)",
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="stoppoll",
            name="content_type",
            field=models.ForeignKey(
                blank=True,
                help_text="A JSON-serialized object for a new message inline keyboard.",
                limit_choices_to=models.Q(("model", "inlinekeyboardmarkup")),
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to="contenttypes.contenttype",
            ),
        ),
        migrations.AlterField(
            model_name="stoppoll",
            name="message_id",
            field=models.IntegerField(
                blank=True,
                help_text="Identifier of the original message with the poll",
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="transferbusinessaccountstars",
            name="business_connection_id",
            field=models.CharField(
                blank=True,
                help_text="Unique identifier of the business connection",
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="transferbusinessaccountstars",
            name="star_count",
            field=models.IntegerField(
                blank=True,
                help_text="Number of Telegram Stars to transfer; 1-10000",
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="transfergift",
            name="business_connection_id",
            field=models.CharField(
                blank=True,
                help_text="Unique identifier of the business connection",
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="transfergift",
            name="new_owner_chat_id",
            field=models.IntegerField(
                blank=True,
                help_text="Unique identifier of the chat which will own the gift. The chat must be active in the last 24 hours.",
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="transfergift",
            name="owned_gift_id",
            field=models.CharField(
                blank=True,
                help_text="Unique identifier of the regular gift that should be transferred",
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="unbanchatmember",
            name="chat_id",
            field=models.CharField(
                blank=True,
                help_text="Unique identifier for the target group or username of the target supergroup or channel (in the format @channelusername)",
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="unbanchatmember",
            name="user_id",
            field=models.IntegerField(
                blank=True,
                help_text="Unique identifier of the target user",
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="unbanchatsenderchat",
            name="chat_id",
            field=models.CharField(
                blank=True,
                help_text="Unique identifier for the target chat or username of the target channel (in the format @channelusername)",
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="unbanchatsenderchat",
            name="sender_chat_id",
            field=models.IntegerField(
                blank=True,
                help_text="Unique identifier of the target sender chat",
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="unhidegeneralforumtopic",
            name="chat_id",
            field=models.CharField(
                blank=True,
                help_text="Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername)",
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="unpinallchatmessages",
            name="chat_id",
            field=models.CharField(
                blank=True,
                help_text="Unique identifier for the target chat or username of the target channel (in the format @channelusername)",
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="unpinallforumtopicmessages",
            name="chat_id",
            field=models.CharField(
                blank=True,
                help_text="Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername)",
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="unpinallforumtopicmessages",
            name="message_thread_id",
            field=models.IntegerField(
                blank=True,
                help_text="Unique identifier for the target message thread of the forum topic",
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="unpinallgeneralforumtopicmessages",
            name="chat_id",
            field=models.CharField(
                blank=True,
                help_text="Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername)",
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="unpinchatmessage",
            name="chat_id",
            field=models.CharField(
                blank=True,
                help_text="Unique identifier for the target chat or username of the target channel (in the format @channelusername)",
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="upgradegift",
            name="business_connection_id",
            field=models.CharField(
                blank=True,
                help_text="Unique identifier of the business connection",
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="upgradegift",
            name="owned_gift_id",
            field=models.CharField(
                blank=True,
                help_text="Unique identifier of the regular gift that should be upgraded to a unique one",
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="uploadstickerfile",
            name="sticker_format",
            field=models.CharField(
                blank=True,
                help_text="Format of the sticker, must be one of “static”, “animated”, “video”",
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="uploadstickerfile",
            name="user_id",
            field=models.IntegerField(
                blank=True,
                help_text="User identifier of sticker file owner",
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="verifychat",
            name="chat_id",
            field=models.CharField(
                blank=True,
                help_text="Unique identifier for the target chat or username of the target channel (in the format @channelusername)",
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="verifyuser",
            name="user_id",
            field=models.IntegerField(
                blank=True,
                help_text="Unique identifier of the target user",
                null=True,
            ),
        ),
    ]
