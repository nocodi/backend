# Generated by Django 5.1.7 on 2025-06-08 13:35

import django.contrib.postgres.fields
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("bot", "0001_initial"),
        ("contenttypes", "0002_remove_content_type_name"),
    ]

    operations = [
        migrations.CreateModel(
            name="Component",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "component_type",
                    models.CharField(
                        choices=[
                            ("TELEGRAM", "Telegram API Component"),
                            ("TRIGGER", "Trigger Component"),
                            ("CONDITIONAL", "Conditional Component"),
                            ("CODE", "Code Component"),
                            ("STATE", "State Component"),
                        ],
                        default="TELEGRAM",
                        help_text="Type of the component",
                        max_length=20,
                    ),
                ),
                ("component_name", models.CharField(max_length=255, null=True)),
                ("position_x", models.FloatField()),
                ("position_y", models.FloatField()),
                (
                    "bot",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="bot.bot",
                    ),
                ),
                (
                    "component_content_type",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="contenttypes.contenttype",
                    ),
                ),
                (
                    "previous_component",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="next_component",
                        to="component.component",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Keyboard",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("timestamp", models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name="InlineKeyboardButton",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "text",
                    models.CharField(help_text="Text of the button", max_length=255),
                ),
                (
                    "url",
                    models.URLField(
                        blank=True,
                        help_text="Optional. HTTP or tg:// URL to be opened when the button is pressed. Links tg://user?id=<user_id> can be used to mention a user by their ID without using a username, if this is allowed by their privacy settings.",
                        null=True,
                    ),
                ),
                (
                    "callback_data",
                    models.CharField(
                        blank=True,
                        help_text="Optional. Data to be sent in a callback query to the bot when the button is pressed, 1-64 bytes",
                        max_length=255,
                        null=True,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="KeyboardButton",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "text",
                    models.CharField(help_text="Text of the button", max_length=255),
                ),
                (
                    "request_contact",
                    models.BooleanField(
                        default=False,
                        help_text="Optional. If True, the user's phone number will be sent as a contact when the button is pressed. Available in private chats only.",
                    ),
                ),
                (
                    "request_location",
                    models.BooleanField(
                        default=False,
                        help_text="Optional. If True, the user's current location will be sent when the button is pressed. Available in private chats only.",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="AddStickerToSet",
            fields=[
                (
                    "component_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="component.component",
                    ),
                ),
                (
                    "user_id",
                    models.IntegerField(
                        blank=True,
                        help_text="User identifier of sticker set owner",
                        null=True,
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        blank=True,
                        help_text="Sticker set name",
                        null=True,
                    ),
                ),
            ],
            bases=("component.component",),
        ),
        migrations.CreateModel(
            name="AnswerInlineQuery",
            fields=[
                (
                    "component_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="component.component",
                    ),
                ),
                (
                    "inline_query_id",
                    models.CharField(
                        blank=True,
                        help_text="Unique identifier for the answered query",
                        null=True,
                    ),
                ),
                (
                    "cache_time",
                    models.IntegerField(
                        blank=True,
                        help_text="The maximum amount of time in seconds that the result of the inline query may be cached on the server. Defaults to 300.",
                        null=True,
                    ),
                ),
                (
                    "is_personal",
                    models.BooleanField(
                        blank=True,
                        help_text="Pass True if results may be cached on the server side only for the user that sent the query. By default, results may be returned to any user who sends the same query.",
                        null=True,
                    ),
                ),
                (
                    "next_offset",
                    models.CharField(
                        blank=True,
                        help_text="Pass the offset that a client should send in the next query with the same text to receive more results. Pass an empty string if there are no more results or if you don't support pagination. Offset length can't exceed 64 bytes.",
                        null=True,
                    ),
                ),
            ],
            bases=("component.component",),
        ),
        migrations.CreateModel(
            name="AnswerPreCheckoutQuery",
            fields=[
                (
                    "component_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="component.component",
                    ),
                ),
                (
                    "pre_checkout_query_id",
                    models.CharField(
                        blank=True,
                        help_text="Unique identifier for the query to be answered",
                        null=True,
                    ),
                ),
                (
                    "ok",
                    models.BooleanField(
                        blank=True,
                        help_text="Specify True if everything is alright (goods are available, etc.) and the bot is ready to proceed with the order. Use False if there are any problems.",
                        null=True,
                    ),
                ),
                (
                    "error_message",
                    models.CharField(
                        blank=True,
                        help_text='Required if ok is False. Error message in human readable form that explains the reason for failure to proceed with the checkout (e.g. "Sorry, somebody just bought the last of our amazing black T-shirts while you were busy filling out your payment details. Please choose a different color or garment!"). Telegram will display this message to the user.',
                        null=True,
                    ),
                ),
            ],
            bases=("component.component",),
        ),
        migrations.CreateModel(
            name="AnswerShippingQuery",
            fields=[
                (
                    "component_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="component.component",
                    ),
                ),
                (
                    "shipping_query_id",
                    models.CharField(
                        blank=True,
                        help_text="Unique identifier for the query to be answered",
                        null=True,
                    ),
                ),
                (
                    "ok",
                    models.BooleanField(
                        blank=True,
                        help_text="Pass True if delivery to the specified address is possible and False if there are any problems (for example, if delivery to the specified address is not possible)",
                        null=True,
                    ),
                ),
                (
                    "error_message",
                    models.CharField(
                        blank=True,
                        help_text="Required if ok is False. Error message in human readable form that explains why it is impossible to complete the order (e.g. “Sorry, delivery to your desired address is unavailable”). Telegram will display this message to the user.",
                        null=True,
                    ),
                ),
            ],
            bases=("component.component",),
        ),
        migrations.CreateModel(
            name="AnswerWebAppQuery",
            fields=[
                (
                    "component_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="component.component",
                    ),
                ),
                (
                    "web_app_query_id",
                    models.CharField(
                        blank=True,
                        help_text="Unique identifier for the query to be answered",
                        null=True,
                    ),
                ),
            ],
            bases=("component.component",),
        ),
        migrations.CreateModel(
            name="ApproveChatJoinRequest",
            fields=[
                (
                    "component_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="component.component",
                    ),
                ),
                (
                    "chat_id",
                    models.CharField(
                        blank=True,
                        help_text="Unique identifier for the target chat or username of the target channel (in the format @channelusername)",
                        null=True,
                    ),
                ),
                (
                    "user_id",
                    models.IntegerField(
                        blank=True,
                        help_text="Unique identifier of the target user",
                        null=True,
                    ),
                ),
            ],
            bases=("component.component",),
        ),
        migrations.CreateModel(
            name="BanChatMember",
            fields=[
                (
                    "component_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="component.component",
                    ),
                ),
                (
                    "chat_id",
                    models.CharField(
                        blank=True,
                        help_text="Unique identifier for the target group or username of the target supergroup or channel (in the format @channelusername)",
                        null=True,
                    ),
                ),
                (
                    "user_id",
                    models.IntegerField(
                        blank=True,
                        help_text="Unique identifier of the target user",
                        null=True,
                    ),
                ),
                (
                    "until_date",
                    models.IntegerField(
                        blank=True,
                        help_text="Date when the user will be unbanned; Unix time. If user is banned for more than 366 days or less than 30 seconds from the current time they are considered to be banned forever. Applied for supergroups and channels only.",
                        null=True,
                    ),
                ),
                (
                    "revoke_messages",
                    models.BooleanField(
                        blank=True,
                        help_text="Pass True to delete all messages from the chat for the user that is being removed. If False, the user will be able to see messages in the group that were sent before the user was removed. Always True for supergroups and channels.",
                        null=True,
                    ),
                ),
            ],
            bases=("component.component",),
        ),
        migrations.CreateModel(
            name="BanChatSenderChat",
            fields=[
                (
                    "component_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="component.component",
                    ),
                ),
                (
                    "chat_id",
                    models.CharField(
                        blank=True,
                        help_text="Unique identifier for the target chat or username of the target channel (in the format @channelusername)",
                        null=True,
                    ),
                ),
                (
                    "sender_chat_id",
                    models.IntegerField(
                        blank=True,
                        help_text="Unique identifier of the target sender chat",
                        null=True,
                    ),
                ),
            ],
            bases=("component.component",),
        ),
        migrations.CreateModel(
            name="CloseForumTopic",
            fields=[
                (
                    "component_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="component.component",
                    ),
                ),
                (
                    "chat_id",
                    models.CharField(
                        blank=True,
                        help_text="Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername)",
                        null=True,
                    ),
                ),
                (
                    "message_thread_id",
                    models.IntegerField(
                        blank=True,
                        help_text="Unique identifier for the target message thread of the forum topic",
                        null=True,
                    ),
                ),
            ],
            bases=("component.component",),
        ),
        migrations.CreateModel(
            name="CloseGeneralForumTopic",
            fields=[
                (
                    "component_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="component.component",
                    ),
                ),
                (
                    "chat_id",
                    models.CharField(
                        blank=True,
                        help_text="Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername)",
                        null=True,
                    ),
                ),
            ],
            bases=("component.component",),
        ),
        migrations.CreateModel(
            name="CodeComponent",
            fields=[
                (
                    "component_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="component.component",
                    ),
                ),
                (
                    "code",
                    models.TextField(
                        blank=True,
                        help_text="Code to execute",
                        null=True,
                    ),
                ),
            ],
            bases=("component.component",),
        ),
        migrations.CreateModel(
            name="ConvertGiftToStars",
            fields=[
                (
                    "component_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="component.component",
                    ),
                ),
                (
                    "business_connection_id",
                    models.CharField(
                        blank=True,
                        help_text="Unique identifier of the business connection",
                        null=True,
                    ),
                ),
                (
                    "owned_gift_id",
                    models.CharField(
                        blank=True,
                        help_text="Unique identifier of the regular gift that should be converted to Telegram Stars",
                        null=True,
                    ),
                ),
            ],
            bases=("component.component",),
        ),
        migrations.CreateModel(
            name="CopyMessages",
            fields=[
                (
                    "component_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="component.component",
                    ),
                ),
                (
                    "chat_id",
                    models.CharField(
                        blank=True,
                        help_text="Unique identifier for the target chat or username of the target channel (in the format @channelusername)",
                        null=True,
                    ),
                ),
                (
                    "message_thread_id",
                    models.IntegerField(
                        blank=True,
                        help_text="Unique identifier for the target message thread (topic) of the forum; for forum supergroups only",
                        null=True,
                    ),
                ),
                (
                    "from_chat_id",
                    models.CharField(
                        blank=True,
                        help_text="Unique identifier for the chat where the original messages were sent (or channel username in the format @channelusername)",
                        null=True,
                    ),
                ),
                (
                    "message_ids",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.IntegerField(),
                        blank=True,
                        default=list,
                        help_text="A JSON-serialized list of 1-100 identifiers of messages in the chat from_chat_id to copy. The identifiers must be specified in a strictly increasing order.",
                        null=True,
                        size=None,
                    ),
                ),
                (
                    "disable_notification",
                    models.BooleanField(
                        blank=True,
                        help_text="Sends the messages silently. Users will receive a notification with no sound.",
                        null=True,
                    ),
                ),
                (
                    "protect_content",
                    models.BooleanField(
                        blank=True,
                        help_text="Protects the contents of the sent messages from forwarding and saving",
                        null=True,
                    ),
                ),
                (
                    "remove_caption",
                    models.BooleanField(
                        blank=True,
                        help_text="Pass True to copy the messages without their captions",
                        null=True,
                    ),
                ),
            ],
            bases=("component.component",),
        ),
        migrations.CreateModel(
            name="CreateChatInviteLink",
            fields=[
                (
                    "component_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="component.component",
                    ),
                ),
                (
                    "chat_id",
                    models.CharField(
                        blank=True,
                        help_text="Unique identifier for the target chat or username of the target channel (in the format @channelusername)",
                        null=True,
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        blank=True,
                        help_text="Invite link name; 0-32 characters",
                        max_length=32,
                        null=True,
                    ),
                ),
                (
                    "expire_date",
                    models.IntegerField(
                        blank=True,
                        help_text="Point in time (Unix timestamp) when the link will expire",
                        null=True,
                    ),
                ),
                (
                    "member_limit",
                    models.IntegerField(
                        blank=True,
                        help_text="The maximum number of users that can be members of the chat simultaneously after joining the chat via this invite link; 1-99999",
                        null=True,
                    ),
                ),
                (
                    "creates_join_request",
                    models.BooleanField(
                        blank=True,
                        help_text="True, if users joining the chat via the link need to be approved by chat administrators. If True, member_limit can't be specified",
                        null=True,
                    ),
                ),
            ],
            bases=("component.component",),
        ),
        migrations.CreateModel(
            name="CreateChatSubscriptionInviteLink",
            fields=[
                (
                    "component_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="component.component",
                    ),
                ),
                (
                    "chat_id",
                    models.CharField(
                        blank=True,
                        help_text="Unique identifier for the target channel chat or username of the target channel (in the format @channelusername)",
                        null=True,
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        blank=True,
                        help_text="Invite link name; 0-32 characters",
                        max_length=32,
                        null=True,
                    ),
                ),
                (
                    "subscription_period",
                    models.IntegerField(
                        blank=True,
                        help_text="The number of seconds the subscription will be active for before the next payment. Currently, it must always be 2592000 (30 days).",
                        null=True,
                    ),
                ),
                (
                    "subscription_price",
                    models.IntegerField(
                        blank=True,
                        help_text="The amount of Telegram Stars a user must pay initially and after each subsequent subscription period to be a member of the chat; 1-10000",
                        null=True,
                    ),
                ),
            ],
            bases=("component.component",),
        ),
        migrations.CreateModel(
            name="CreateForumTopic",
            fields=[
                (
                    "component_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="component.component",
                    ),
                ),
                (
                    "chat_id",
                    models.CharField(
                        blank=True,
                        help_text="Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername)",
                        null=True,
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        blank=True,
                        help_text="Topic name, 1-128 characters",
                        max_length=128,
                        null=True,
                    ),
                ),
                (
                    "icon_color",
                    models.IntegerField(
                        blank=True,
                        help_text="Color of the topic icon in RGB format. Currently, must be one of 7322096 (0x6FB9F0), 16766590 (0xFFD67E), 13338331 (0xCB86DB), 9367192 (0x8EEE98), 16749490 (0xFF93B2), or 16478047 (0xFB6F5F)",
                        null=True,
                    ),
                ),
                (
                    "icon_custom_emoji_id",
                    models.CharField(
                        blank=True,
                        help_text="Unique identifier of the custom emoji shown as the topic icon. Use getForumTopicIconStickers to get all allowed custom emoji identifiers.",
                        null=True,
                    ),
                ),
            ],
            bases=("component.component",),
        ),
        migrations.CreateModel(
            name="CreateInvoiceLink",
            fields=[
                (
                    "component_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="component.component",
                    ),
                ),
                (
                    "business_connection_id",
                    models.CharField(
                        blank=True,
                        help_text="Unique identifier of the business connection on behalf of which the link will be created. For payments in Telegram Stars only.",
                        null=True,
                    ),
                ),
                (
                    "title",
                    models.CharField(
                        blank=True,
                        help_text="Product name, 1-32 characters",
                        max_length=32,
                        null=True,
                    ),
                ),
                (
                    "description",
                    models.CharField(
                        blank=True,
                        help_text="Product description, 1-255 characters",
                        max_length=255,
                        null=True,
                    ),
                ),
                (
                    "payload",
                    models.CharField(
                        blank=True,
                        help_text="Bot-defined invoice payload, 1-128 bytes. This will not be displayed to the user, use it for your internal processes.",
                        null=True,
                    ),
                ),
                (
                    "provider_token",
                    models.CharField(
                        blank=True,
                        help_text="Payment provider token, obtained via @BotFather. Pass an empty string for payments in Telegram Stars.",
                        null=True,
                    ),
                ),
                (
                    "currency",
                    models.CharField(
                        blank=True,
                        help_text="Three-letter ISO 4217 currency code, see more on currencies. Pass “XTR” for payments in Telegram Stars.",
                        null=True,
                    ),
                ),
                (
                    "subscription_period",
                    models.IntegerField(
                        blank=True,
                        help_text="The number of seconds the subscription will be active for before the next payment. The currency must be set to “XTR” (Telegram Stars) if the parameter is used. Currently, it must always be 2592000 (30 days) if specified. Any number of subscriptions can be active for a given bot at the same time, including multiple concurrent subscriptions from the same user. Subscription price must no exceed 10000 Telegram Stars.",
                        null=True,
                    ),
                ),
                (
                    "max_tip_amount",
                    models.IntegerField(
                        blank=True,
                        help_text="The maximum accepted amount for tips in the smallest units of the currency (integer, not float/double). For example, for a maximum tip of US$ 1.45 pass max_tip_amount = 145. See the exp parameter in currencies.json, it shows the number of digits past the decimal point for each currency (2 for the majority of currencies). Defaults to 0. Not supported for payments in Telegram Stars.",
                        null=True,
                    ),
                ),
                (
                    "suggested_tip_amounts",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.IntegerField(),
                        blank=True,
                        default=list,
                        help_text="A JSON-serialized array of suggested amounts of tips in the smallest units of the currency (integer, not float/double). At most 4 suggested tip amounts can be specified. The suggested tip amounts must be positive, passed in a strictly increased order and must not exceed max_tip_amount.",
                        null=True,
                        size=None,
                    ),
                ),
                (
                    "provider_data",
                    models.CharField(
                        blank=True,
                        help_text="JSON-serialized data about the invoice, which will be shared with the payment provider. A detailed description of required fields should be provided by the payment provider.",
                        null=True,
                    ),
                ),
                (
                    "photo_url",
                    models.CharField(
                        blank=True,
                        help_text="URL of the product photo for the invoice. Can be a photo of the goods or a marketing image for a service.",
                        null=True,
                    ),
                ),
                (
                    "photo_size",
                    models.IntegerField(
                        blank=True,
                        help_text="Photo size in bytes",
                        null=True,
                    ),
                ),
                (
                    "photo_width",
                    models.IntegerField(blank=True, help_text="Photo width", null=True),
                ),
                (
                    "photo_height",
                    models.IntegerField(
                        blank=True,
                        help_text="Photo height",
                        null=True,
                    ),
                ),
                (
                    "need_name",
                    models.BooleanField(
                        blank=True,
                        help_text="Pass True if you require the user's full name to complete the order. Ignored for payments in Telegram Stars.",
                        null=True,
                    ),
                ),
                (
                    "need_phone_number",
                    models.BooleanField(
                        blank=True,
                        help_text="Pass True if you require the user's phone number to complete the order. Ignored for payments in Telegram Stars.",
                        null=True,
                    ),
                ),
                (
                    "need_email",
                    models.BooleanField(
                        blank=True,
                        help_text="Pass True if you require the user's email address to complete the order. Ignored for payments in Telegram Stars.",
                        null=True,
                    ),
                ),
                (
                    "need_shipping_address",
                    models.BooleanField(
                        blank=True,
                        help_text="Pass True if you require the user's shipping address to complete the order. Ignored for payments in Telegram Stars.",
                        null=True,
                    ),
                ),
                (
                    "send_phone_number_to_provider",
                    models.BooleanField(
                        blank=True,
                        help_text="Pass True if the user's phone number should be sent to the provider. Ignored for payments in Telegram Stars.",
                        null=True,
                    ),
                ),
                (
                    "send_email_to_provider",
                    models.BooleanField(
                        blank=True,
                        help_text="Pass True if the user's email address should be sent to the provider. Ignored for payments in Telegram Stars.",
                        null=True,
                    ),
                ),
                (
                    "is_flexible",
                    models.BooleanField(
                        blank=True,
                        help_text="Pass True if the final price depends on the shipping method. Ignored for payments in Telegram Stars.",
                        null=True,
                    ),
                ),
            ],
            bases=("component.component",),
        ),
        migrations.CreateModel(
            name="CreateNewStickerSet",
            fields=[
                (
                    "component_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="component.component",
                    ),
                ),
                (
                    "user_id",
                    models.IntegerField(
                        blank=True,
                        help_text="User identifier of created sticker set owner",
                        null=True,
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        blank=True,
                        help_text='Short name of sticker set, to be used in t.me/addstickers/ URLs (e.g., animals). Can contain only English letters, digits and underscores. Must begin with a letter, can\'t contain consecutive underscores and must end in "_by_<bot_username>". <bot_username> is case insensitive. 1-64 characters.',
                        max_length=64,
                        null=True,
                    ),
                ),
                (
                    "title",
                    models.CharField(
                        blank=True,
                        help_text="Sticker set title, 1-64 characters",
                        max_length=64,
                        null=True,
                    ),
                ),
                (
                    "sticker_type",
                    models.CharField(
                        blank=True,
                        help_text="Type of stickers in the set, pass “regular”, “mask”, or “custom_emoji”. By default, a regular sticker set is created.",
                        null=True,
                    ),
                ),
                (
                    "needs_repainting",
                    models.BooleanField(
                        blank=True,
                        help_text="Pass True if stickers in the sticker set must be repainted to the color of text when used in messages, the accent color if used as emoji status, white on chat photos, or another appropriate color based on context; for custom emoji sticker sets only",
                        null=True,
                    ),
                ),
            ],
            bases=("component.component",),
        ),
        migrations.CreateModel(
            name="DeclineChatJoinRequest",
            fields=[
                (
                    "component_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="component.component",
                    ),
                ),
                (
                    "chat_id",
                    models.CharField(
                        blank=True,
                        help_text="Unique identifier for the target chat or username of the target channel (in the format @channelusername)",
                        null=True,
                    ),
                ),
                (
                    "user_id",
                    models.IntegerField(
                        blank=True,
                        help_text="Unique identifier of the target user",
                        null=True,
                    ),
                ),
            ],
            bases=("component.component",),
        ),
        migrations.CreateModel(
            name="DeleteBusinessMessages",
            fields=[
                (
                    "component_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="component.component",
                    ),
                ),
                (
                    "business_connection_id",
                    models.CharField(
                        blank=True,
                        help_text="Unique identifier of the business connection on behalf of which to delete the messages",
                        null=True,
                    ),
                ),
                (
                    "message_ids",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.IntegerField(),
                        blank=True,
                        default=list,
                        help_text="A JSON-serialized list of 1-100 identifiers of messages to delete. All messages must be from the same chat. See deleteMessage for limitations on which messages can be deleted",
                        null=True,
                        size=None,
                    ),
                ),
            ],
            bases=("component.component",),
        ),
        migrations.CreateModel(
            name="DeleteChatPhoto",
            fields=[
                (
                    "component_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="component.component",
                    ),
                ),
                (
                    "chat_id",
                    models.CharField(
                        blank=True,
                        help_text="Unique identifier for the target chat or username of the target channel (in the format @channelusername)",
                        null=True,
                    ),
                ),
            ],
            bases=("component.component",),
        ),
        migrations.CreateModel(
            name="DeleteChatStickerSet",
            fields=[
                (
                    "component_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="component.component",
                    ),
                ),
                (
                    "chat_id",
                    models.CharField(
                        blank=True,
                        help_text="Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername)",
                        null=True,
                    ),
                ),
            ],
            bases=("component.component",),
        ),
        migrations.CreateModel(
            name="DeleteForumTopic",
            fields=[
                (
                    "component_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="component.component",
                    ),
                ),
                (
                    "chat_id",
                    models.CharField(
                        blank=True,
                        help_text="Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername)",
                        null=True,
                    ),
                ),
                (
                    "message_thread_id",
                    models.IntegerField(
                        blank=True,
                        help_text="Unique identifier for the target message thread of the forum topic",
                        null=True,
                    ),
                ),
            ],
            bases=("component.component",),
        ),
        migrations.CreateModel(
            name="DeleteMessage",
            fields=[
                (
                    "component_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="component.component",
                    ),
                ),
                (
                    "chat_id",
                    models.CharField(
                        blank=True,
                        help_text="Unique identifier for the target chat or username of the target channel (in the format @channelusername)",
                        null=True,
                    ),
                ),
                (
                    "message_id",
                    models.IntegerField(
                        blank=True,
                        help_text="Identifier of the message to delete",
                        null=True,
                    ),
                ),
            ],
            bases=("component.component",),
        ),
        migrations.CreateModel(
            name="DeleteMessages",
            fields=[
                (
                    "component_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="component.component",
                    ),
                ),
                (
                    "chat_id",
                    models.CharField(
                        blank=True,
                        help_text="Unique identifier for the target chat or username of the target channel (in the format @channelusername)",
                        null=True,
                    ),
                ),
                (
                    "message_ids",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.IntegerField(),
                        blank=True,
                        default=list,
                        help_text="A JSON-serialized list of 1-100 identifiers of messages to delete. See deleteMessage for limitations on which messages can be deleted",
                        null=True,
                        size=None,
                    ),
                ),
            ],
            bases=("component.component",),
        ),
        migrations.CreateModel(
            name="DeleteMyCommands",
            fields=[
                (
                    "component_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="component.component",
                    ),
                ),
                (
                    "language_code",
                    models.CharField(
                        blank=True,
                        help_text="A two-letter ISO 639-1 language code. If empty, commands will be applied to all users from the given scope, for whose language there are no dedicated commands",
                        null=True,
                    ),
                ),
            ],
            bases=("component.component",),
        ),
        migrations.CreateModel(
            name="DeleteStickerFromSet",
            fields=[
                (
                    "component_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="component.component",
                    ),
                ),
                (
                    "sticker",
                    models.CharField(
                        blank=True,
                        help_text="File identifier of the sticker",
                        null=True,
                    ),
                ),
            ],
            bases=("component.component",),
        ),
        migrations.CreateModel(
            name="DeleteStickerSet",
            fields=[
                (
                    "component_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="component.component",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        blank=True,
                        help_text="Sticker set name",
                        null=True,
                    ),
                ),
            ],
            bases=("component.component",),
        ),
        migrations.CreateModel(
            name="DeleteStory",
            fields=[
                (
                    "component_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="component.component",
                    ),
                ),
                (
                    "business_connection_id",
                    models.CharField(
                        blank=True,
                        help_text="Unique identifier of the business connection",
                        null=True,
                    ),
                ),
                (
                    "story_id",
                    models.IntegerField(
                        blank=True,
                        help_text="Unique identifier of the story to delete",
                        null=True,
                    ),
                ),
            ],
            bases=("component.component",),
        ),
        migrations.CreateModel(
            name="EditChatInviteLink",
            fields=[
                (
                    "component_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="component.component",
                    ),
                ),
                (
                    "chat_id",
                    models.CharField(
                        blank=True,
                        help_text="Unique identifier for the target chat or username of the target channel (in the format @channelusername)",
                        null=True,
                    ),
                ),
                (
                    "invite_link",
                    models.CharField(
                        blank=True,
                        help_text="The invite link to edit",
                        null=True,
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        blank=True,
                        help_text="Invite link name; 0-32 characters",
                        max_length=32,
                        null=True,
                    ),
                ),
                (
                    "expire_date",
                    models.IntegerField(
                        blank=True,
                        help_text="Point in time (Unix timestamp) when the link will expire",
                        null=True,
                    ),
                ),
                (
                    "member_limit",
                    models.IntegerField(
                        blank=True,
                        help_text="The maximum number of users that can be members of the chat simultaneously after joining the chat via this invite link; 1-99999",
                        null=True,
                    ),
                ),
                (
                    "creates_join_request",
                    models.BooleanField(
                        blank=True,
                        help_text="True, if users joining the chat via the link need to be approved by chat administrators. If True, member_limit can't be specified",
                        null=True,
                    ),
                ),
            ],
            bases=("component.component",),
        ),
        migrations.CreateModel(
            name="EditChatSubscriptionInviteLink",
            fields=[
                (
                    "component_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="component.component",
                    ),
                ),
                (
                    "chat_id",
                    models.CharField(
                        blank=True,
                        help_text="Unique identifier for the target chat or username of the target channel (in the format @channelusername)",
                        null=True,
                    ),
                ),
                (
                    "invite_link",
                    models.CharField(
                        blank=True,
                        help_text="The invite link to edit",
                        null=True,
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        blank=True,
                        help_text="Invite link name; 0-32 characters",
                        max_length=32,
                        null=True,
                    ),
                ),
            ],
            bases=("component.component",),
        ),
        migrations.CreateModel(
            name="EditForumTopic",
            fields=[
                (
                    "component_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="component.component",
                    ),
                ),
                (
                    "chat_id",
                    models.CharField(
                        blank=True,
                        help_text="Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername)",
                        null=True,
                    ),
                ),
                (
                    "message_thread_id",
                    models.IntegerField(
                        blank=True,
                        help_text="Unique identifier for the target message thread of the forum topic",
                        null=True,
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        blank=True,
                        help_text="New topic name, 0-128 characters. If not specified or empty, the current name of the topic will be kept",
                        max_length=128,
                        null=True,
                    ),
                ),
                (
                    "icon_custom_emoji_id",
                    models.CharField(
                        blank=True,
                        help_text="New unique identifier of the custom emoji shown as the topic icon. Use getForumTopicIconStickers to get all allowed custom emoji identifiers. Pass an empty string to remove the icon. If not specified, the current icon will be kept",
                        null=True,
                    ),
                ),
            ],
            bases=("component.component",),
        ),
        migrations.CreateModel(
            name="EditGeneralForumTopic",
            fields=[
                (
                    "component_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="component.component",
                    ),
                ),
                (
                    "chat_id",
                    models.CharField(
                        blank=True,
                        help_text="Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername)",
                        null=True,
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        blank=True,
                        help_text="New topic name, 1-128 characters",
                        max_length=128,
                        null=True,
                    ),
                ),
            ],
            bases=("component.component",),
        ),
        migrations.CreateModel(
            name="EditStory",
            fields=[
                (
                    "component_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="component.component",
                    ),
                ),
                (
                    "business_connection_id",
                    models.CharField(
                        blank=True,
                        help_text="Unique identifier of the business connection",
                        null=True,
                    ),
                ),
                (
                    "story_id",
                    models.IntegerField(
                        blank=True,
                        help_text="Unique identifier of the story to edit",
                        null=True,
                    ),
                ),
                (
                    "caption",
                    models.CharField(
                        blank=True,
                        help_text="Caption of the story, 0-2048 characters after entities parsing",
                        max_length=2048,
                        null=True,
                    ),
                ),
                (
                    "parse_mode",
                    models.CharField(
                        blank=True,
                        help_text="Mode for parsing entities in the story caption. See formatting options for more details.",
                        null=True,
                    ),
                ),
            ],
            bases=("component.component",),
        ),
        migrations.CreateModel(
            name="EditUserStarSubscription",
            fields=[
                (
                    "component_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="component.component",
                    ),
                ),
                (
                    "user_id",
                    models.IntegerField(
                        blank=True,
                        help_text="Identifier of the user whose subscription will be edited",
                        null=True,
                    ),
                ),
                (
                    "telegram_payment_charge_id",
                    models.CharField(
                        blank=True,
                        help_text="Telegram payment identifier for the subscription",
                        null=True,
                    ),
                ),
                (
                    "is_canceled",
                    models.BooleanField(
                        blank=True,
                        help_text="Pass True to cancel extension of the user subscription; the subscription must be active up to the end of the current subscription period. Pass False to allow the user to re-enable a subscription that was previously canceled by the bot.",
                        null=True,
                    ),
                ),
            ],
            bases=("component.component",),
        ),
        migrations.CreateModel(
            name="ExportChatInviteLink",
            fields=[
                (
                    "component_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="component.component",
                    ),
                ),
                (
                    "chat_id",
                    models.CharField(
                        blank=True,
                        help_text="Unique identifier for the target chat or username of the target channel (in the format @channelusername)",
                        null=True,
                    ),
                ),
            ],
            bases=("component.component",),
        ),
        migrations.CreateModel(
            name="ForwardMessage",
            fields=[
                (
                    "component_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="component.component",
                    ),
                ),
                (
                    "chat_id",
                    models.CharField(
                        blank=True,
                        help_text="Unique identifier for the target chat or username of the target channel (in the format @channelusername)",
                        null=True,
                    ),
                ),
                (
                    "message_thread_id",
                    models.IntegerField(
                        blank=True,
                        help_text="Unique identifier for the target message thread (topic) of the forum; for forum supergroups only",
                        null=True,
                    ),
                ),
                (
                    "from_chat_id",
                    models.CharField(
                        blank=True,
                        help_text="Unique identifier for the chat where the original message was sent (or channel username in the format @channelusername)",
                        null=True,
                    ),
                ),
                (
                    "video_start_timestamp",
                    models.IntegerField(
                        blank=True,
                        help_text="New start timestamp for the forwarded video in the message",
                        null=True,
                    ),
                ),
                (
                    "disable_notification",
                    models.BooleanField(
                        blank=True,
                        help_text="Sends the message silently. Users will receive a notification with no sound.",
                        null=True,
                    ),
                ),
                (
                    "protect_content",
                    models.BooleanField(
                        blank=True,
                        help_text="Protects the contents of the forwarded message from forwarding and saving",
                        null=True,
                    ),
                ),
                (
                    "message_id",
                    models.IntegerField(
                        blank=True,
                        help_text="Message identifier in the chat specified in from_chat_id",
                        null=True,
                    ),
                ),
            ],
            bases=("component.component",),
        ),
        migrations.CreateModel(
            name="ForwardMessages",
            fields=[
                (
                    "component_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="component.component",
                    ),
                ),
                (
                    "chat_id",
                    models.CharField(
                        blank=True,
                        help_text="Unique identifier for the target chat or username of the target channel (in the format @channelusername)",
                        null=True,
                    ),
                ),
                (
                    "message_thread_id",
                    models.IntegerField(
                        blank=True,
                        help_text="Unique identifier for the target message thread (topic) of the forum; for forum supergroups only",
                        null=True,
                    ),
                ),
                (
                    "from_chat_id",
                    models.CharField(
                        blank=True,
                        help_text="Unique identifier for the chat where the original messages were sent (or channel username in the format @channelusername)",
                        null=True,
                    ),
                ),
                (
                    "message_ids",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.IntegerField(),
                        blank=True,
                        default=list,
                        help_text="A JSON-serialized list of 1-100 identifiers of messages in the chat from_chat_id to forward. The identifiers must be specified in a strictly increasing order.",
                        null=True,
                        size=None,
                    ),
                ),
                (
                    "disable_notification",
                    models.BooleanField(
                        blank=True,
                        help_text="Sends the messages silently. Users will receive a notification with no sound.",
                        null=True,
                    ),
                ),
                (
                    "protect_content",
                    models.BooleanField(
                        blank=True,
                        help_text="Protects the contents of the forwarded messages from forwarding and saving",
                        null=True,
                    ),
                ),
            ],
            bases=("component.component",),
        ),
        migrations.CreateModel(
            name="GetBusinessAccountGifts",
            fields=[
                (
                    "component_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="component.component",
                    ),
                ),
                (
                    "business_connection_id",
                    models.CharField(
                        blank=True,
                        help_text="Unique identifier of the business connection",
                        null=True,
                    ),
                ),
                (
                    "exclude_unsaved",
                    models.BooleanField(
                        blank=True,
                        help_text="Pass True to exclude gifts that aren't saved to the account's profile page",
                        null=True,
                    ),
                ),
                (
                    "exclude_saved",
                    models.BooleanField(
                        blank=True,
                        help_text="Pass True to exclude gifts that are saved to the account's profile page",
                        null=True,
                    ),
                ),
                (
                    "exclude_unlimited",
                    models.BooleanField(
                        blank=True,
                        help_text="Pass True to exclude gifts that can be purchased an unlimited number of times",
                        null=True,
                    ),
                ),
                (
                    "exclude_limited",
                    models.BooleanField(
                        blank=True,
                        help_text="Pass True to exclude gifts that can be purchased a limited number of times",
                        null=True,
                    ),
                ),
                (
                    "exclude_unique",
                    models.BooleanField(
                        blank=True,
                        help_text="Pass True to exclude unique gifts",
                        null=True,
                    ),
                ),
                (
                    "sort_by_price",
                    models.BooleanField(
                        blank=True,
                        help_text="Pass True to sort results by gift price instead of send date. Sorting is applied before pagination.",
                        null=True,
                    ),
                ),
                (
                    "offset",
                    models.CharField(
                        blank=True,
                        help_text="Offset of the first entry to return as received from the previous request; use empty string to get the first chunk of results",
                        null=True,
                    ),
                ),
                (
                    "limit",
                    models.IntegerField(
                        blank=True,
                        help_text="The maximum number of gifts to be returned; 1-100. Defaults to 100",
                        null=True,
                    ),
                ),
            ],
            bases=("component.component",),
        ),
        migrations.CreateModel(
            name="GetBusinessAccountStarBalance",
            fields=[
                (
                    "component_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="component.component",
                    ),
                ),
                (
                    "business_connection_id",
                    models.CharField(
                        blank=True,
                        help_text="Unique identifier of the business connection",
                        null=True,
                    ),
                ),
            ],
            bases=("component.component",),
        ),
        migrations.CreateModel(
            name="GetBusinessConnection",
            fields=[
                (
                    "component_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="component.component",
                    ),
                ),
                (
                    "business_connection_id",
                    models.CharField(
                        blank=True,
                        help_text="Unique identifier of the business connection",
                        null=True,
                    ),
                ),
            ],
            bases=("component.component",),
        ),
        migrations.CreateModel(
            name="GetChat",
            fields=[
                (
                    "component_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="component.component",
                    ),
                ),
                (
                    "chat_id",
                    models.CharField(
                        blank=True,
                        help_text="Unique identifier for the target chat or username of the target supergroup or channel (in the format @channelusername)",
                        null=True,
                    ),
                ),
            ],
            bases=("component.component",),
        ),
        migrations.CreateModel(
            name="GetChatAdministrators",
            fields=[
                (
                    "component_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="component.component",
                    ),
                ),
                (
                    "chat_id",
                    models.CharField(
                        blank=True,
                        help_text="Unique identifier for the target chat or username of the target supergroup or channel (in the format @channelusername)",
                        null=True,
                    ),
                ),
            ],
            bases=("component.component",),
        ),
        migrations.CreateModel(
            name="GetChatMember",
            fields=[
                (
                    "component_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="component.component",
                    ),
                ),
                (
                    "chat_id",
                    models.CharField(
                        blank=True,
                        help_text="Unique identifier for the target chat or username of the target supergroup or channel (in the format @channelusername)",
                        null=True,
                    ),
                ),
                (
                    "user_id",
                    models.IntegerField(
                        blank=True,
                        help_text="Unique identifier of the target user",
                        null=True,
                    ),
                ),
            ],
            bases=("component.component",),
        ),
        migrations.CreateModel(
            name="GetChatMemberCount",
            fields=[
                (
                    "component_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="component.component",
                    ),
                ),
                (
                    "chat_id",
                    models.CharField(
                        blank=True,
                        help_text="Unique identifier for the target chat or username of the target supergroup or channel (in the format @channelusername)",
                        null=True,
                    ),
                ),
            ],
            bases=("component.component",),
        ),
        migrations.CreateModel(
            name="GetChatMenuButton",
            fields=[
                (
                    "component_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="component.component",
                    ),
                ),
                (
                    "chat_id",
                    models.IntegerField(
                        blank=True,
                        help_text="Unique identifier for the target private chat. If not specified, default bot's menu button will be returned",
                        null=True,
                    ),
                ),
            ],
            bases=("component.component",),
        ),
        migrations.CreateModel(
            name="GetCustomEmojiStickers",
            fields=[
                (
                    "component_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="component.component",
                    ),
                ),
                (
                    "custom_emoji_ids",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(),
                        blank=True,
                        default=list,
                        help_text="A JSON-serialized list of custom emoji identifiers. At most 200 custom emoji identifiers can be specified.",
                        null=True,
                        size=None,
                    ),
                ),
            ],
            bases=("component.component",),
        ),
        migrations.CreateModel(
            name="GetFile",
            fields=[
                (
                    "component_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="component.component",
                    ),
                ),
                (
                    "file_id",
                    models.CharField(
                        blank=True,
                        help_text="File identifier to get information about",
                        null=True,
                    ),
                ),
            ],
            bases=("component.component",),
        ),
        migrations.CreateModel(
            name="GetMyCommands",
            fields=[
                (
                    "component_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="component.component",
                    ),
                ),
                (
                    "language_code",
                    models.CharField(
                        blank=True,
                        help_text="A two-letter ISO 639-1 language code or an empty string",
                        null=True,
                    ),
                ),
            ],
            bases=("component.component",),
        ),
        migrations.CreateModel(
            name="GetMyDefaultAdministratorRights",
            fields=[
                (
                    "component_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="component.component",
                    ),
                ),
                (
                    "for_channels",
                    models.BooleanField(
                        blank=True,
                        help_text="Pass True to get default administrator rights of the bot in channels. Otherwise, default administrator rights of the bot for groups and supergroups will be returned.",
                        null=True,
                    ),
                ),
            ],
            bases=("component.component",),
        ),
        migrations.CreateModel(
            name="GetMyDescription",
            fields=[
                (
                    "component_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="component.component",
                    ),
                ),
                (
                    "language_code",
                    models.CharField(
                        blank=True,
                        help_text="A two-letter ISO 639-1 language code or an empty string",
                        null=True,
                    ),
                ),
            ],
            bases=("component.component",),
        ),
        migrations.CreateModel(
            name="GetMyName",
            fields=[
                (
                    "component_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="component.component",
                    ),
                ),
                (
                    "language_code",
                    models.CharField(
                        blank=True,
                        help_text="A two-letter ISO 639-1 language code or an empty string",
                        null=True,
                    ),
                ),
            ],
            bases=("component.component",),
        ),
        migrations.CreateModel(
            name="GetMyShortDescription",
            fields=[
                (
                    "component_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="component.component",
                    ),
                ),
                (
                    "language_code",
                    models.CharField(
                        blank=True,
                        help_text="A two-letter ISO 639-1 language code or an empty string",
                        null=True,
                    ),
                ),
            ],
            bases=("component.component",),
        ),
        migrations.CreateModel(
            name="GetStarTransactions",
            fields=[
                (
                    "component_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="component.component",
                    ),
                ),
                (
                    "offset",
                    models.IntegerField(
                        blank=True,
                        help_text="Number of transactions to skip in the response",
                        null=True,
                    ),
                ),
                (
                    "limit",
                    models.IntegerField(
                        blank=True,
                        help_text="The maximum number of transactions to be retrieved. Values between 1-100 are accepted. Defaults to 100.",
                        null=True,
                    ),
                ),
            ],
            bases=("component.component",),
        ),
        migrations.CreateModel(
            name="GetStickerSet",
            fields=[
                (
                    "component_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="component.component",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        blank=True,
                        help_text="Name of the sticker set",
                        null=True,
                    ),
                ),
            ],
            bases=("component.component",),
        ),
        migrations.CreateModel(
            name="GetUserChatBoosts",
            fields=[
                (
                    "component_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="component.component",
                    ),
                ),
                (
                    "chat_id",
                    models.CharField(
                        blank=True,
                        help_text="Unique identifier for the chat or username of the channel (in the format @channelusername)",
                        null=True,
                    ),
                ),
                (
                    "user_id",
                    models.IntegerField(
                        blank=True,
                        help_text="Unique identifier of the target user",
                        null=True,
                    ),
                ),
            ],
            bases=("component.component",),
        ),
        migrations.CreateModel(
            name="GetUserProfilePhotos",
            fields=[
                (
                    "component_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="component.component",
                    ),
                ),
                (
                    "user_id",
                    models.IntegerField(
                        blank=True,
                        help_text="Unique identifier of the target user",
                        null=True,
                    ),
                ),
                (
                    "offset",
                    models.IntegerField(
                        blank=True,
                        help_text="Sequential number of the first photo to be returned. By default, all photos are returned.",
                        null=True,
                    ),
                ),
                (
                    "limit",
                    models.IntegerField(
                        blank=True,
                        help_text="Limits the number of photos to be retrieved. Values between 1-100 are accepted. Defaults to 100.",
                        null=True,
                    ),
                ),
            ],
            bases=("component.component",),
        ),
        migrations.CreateModel(
            name="GiftPremiumSubscription",
            fields=[
                (
                    "component_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="component.component",
                    ),
                ),
                (
                    "user_id",
                    models.IntegerField(
                        blank=True,
                        help_text="Unique identifier of the target user who will receive a Telegram Premium subscription",
                        null=True,
                    ),
                ),
                (
                    "month_count",
                    models.IntegerField(
                        blank=True,
                        help_text="Number of months the Telegram Premium subscription will be active for the user; must be one of 3, 6, or 12",
                        null=True,
                    ),
                ),
                (
                    "star_count",
                    models.IntegerField(
                        blank=True,
                        help_text="Number of Telegram Stars to pay for the Telegram Premium subscription; must be 1000 for 3 months, 1500 for 6 months, and 2500 for 12 months",
                        null=True,
                    ),
                ),
                (
                    "text",
                    models.CharField(
                        blank=True,
                        help_text="Text that will be shown along with the service message about the subscription; 0-128 characters",
                        max_length=128,
                        null=True,
                    ),
                ),
                (
                    "text_parse_mode",
                    models.CharField(
                        blank=True,
                        help_text="Mode for parsing entities in the text. See formatting options for more details. Entities other than “bold”, “italic”, “underline”, “strikethrough”, “spoiler”, and “custom_emoji” are ignored.",
                        null=True,
                    ),
                ),
            ],
            bases=("component.component",),
        ),
        migrations.CreateModel(
            name="HideGeneralForumTopic",
            fields=[
                (
                    "component_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="component.component",
                    ),
                ),
                (
                    "chat_id",
                    models.CharField(
                        blank=True,
                        help_text="Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername)",
                        null=True,
                    ),
                ),
            ],
            bases=("component.component",),
        ),
        migrations.CreateModel(
            name="LeaveChat",
            fields=[
                (
                    "component_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="component.component",
                    ),
                ),
                (
                    "chat_id",
                    models.CharField(
                        blank=True,
                        help_text="Unique identifier for the target chat or username of the target supergroup or channel (in the format @channelusername)",
                        null=True,
                    ),
                ),
            ],
            bases=("component.component",),
        ),
        migrations.CreateModel(
            name="OnMessage",
            fields=[
                (
                    "component_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="component.component",
                    ),
                ),
                (
                    "text",
                    models.CharField(
                        blank=True,
                        help_text="Optional text pattern to match against incoming messages. If not specified, matches any text message.",
                        max_length=4096,
                        null=True,
                    ),
                ),
                (
                    "regex",
                    models.BooleanField(
                        default=False,
                        help_text="Whether to treat the text pattern as a regular expression",
                    ),
                ),
                (
                    "case_sensitive",
                    models.BooleanField(
                        default=False,
                        help_text="Whether the text matching should be case sensitive",
                    ),
                ),
                (
                    "state",
                    models.CharField(
                        blank=True,
                        help_text="Optional comma separated list of states to match. If not specified, matches any state.",
                        max_length=4096,
                        null=True,
                    ),
                ),
            ],
            bases=("component.component",),
        ),
        migrations.CreateModel(
            name="PinChatMessage",
            fields=[
                (
                    "component_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="component.component",
                    ),
                ),
                (
                    "business_connection_id",
                    models.CharField(
                        blank=True,
                        help_text="Unique identifier of the business connection on behalf of which the message will be pinned",
                        null=True,
                    ),
                ),
                (
                    "chat_id",
                    models.CharField(
                        blank=True,
                        help_text="Unique identifier for the target chat or username of the target channel (in the format @channelusername)",
                        null=True,
                    ),
                ),
                (
                    "message_id",
                    models.IntegerField(
                        blank=True,
                        help_text="Identifier of a message to pin",
                        null=True,
                    ),
                ),
                (
                    "disable_notification",
                    models.BooleanField(
                        blank=True,
                        help_text="Pass True if it is not necessary to send a notification to all chat members about the new pinned message. Notifications are always disabled in channels and private chats.",
                        null=True,
                    ),
                ),
            ],
            bases=("component.component",),
        ),
        migrations.CreateModel(
            name="PostStory",
            fields=[
                (
                    "component_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="component.component",
                    ),
                ),
                (
                    "business_connection_id",
                    models.CharField(
                        blank=True,
                        help_text="Unique identifier of the business connection",
                        null=True,
                    ),
                ),
                (
                    "active_period",
                    models.IntegerField(
                        blank=True,
                        help_text="Period after which the story is moved to the archive, in seconds; must be one of 6 * 3600, 12 * 3600, 86400, or 2 * 86400",
                        null=True,
                    ),
                ),
                (
                    "caption",
                    models.CharField(
                        blank=True,
                        help_text="Caption of the story, 0-2048 characters after entities parsing",
                        max_length=2048,
                        null=True,
                    ),
                ),
                (
                    "parse_mode",
                    models.CharField(
                        blank=True,
                        help_text="Mode for parsing entities in the story caption. See formatting options for more details.",
                        null=True,
                    ),
                ),
                (
                    "post_to_chat_page",
                    models.BooleanField(
                        blank=True,
                        help_text="Pass True to keep the story accessible after it expires",
                        null=True,
                    ),
                ),
                (
                    "protect_content",
                    models.BooleanField(
                        blank=True,
                        help_text="Pass True if the content of the story must be protected from forwarding and screenshotting",
                        null=True,
                    ),
                ),
            ],
            bases=("component.component",),
        ),
        migrations.CreateModel(
            name="PromoteChatMember",
            fields=[
                (
                    "component_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="component.component",
                    ),
                ),
                (
                    "chat_id",
                    models.CharField(
                        blank=True,
                        help_text="Unique identifier for the target chat or username of the target channel (in the format @channelusername)",
                        null=True,
                    ),
                ),
                (
                    "user_id",
                    models.IntegerField(
                        blank=True,
                        help_text="Unique identifier of the target user",
                        null=True,
                    ),
                ),
                (
                    "is_anonymous",
                    models.BooleanField(
                        blank=True,
                        help_text="Pass True if the administrator's presence in the chat is hidden",
                        null=True,
                    ),
                ),
                (
                    "can_manage_chat",
                    models.BooleanField(
                        blank=True,
                        help_text="Pass True if the administrator can access the chat event log, get boost list, see hidden supergroup and channel members, report spam messages and ignore slow mode. Implied by any other administrator privilege.",
                        null=True,
                    ),
                ),
                (
                    "can_delete_messages",
                    models.BooleanField(
                        blank=True,
                        help_text="Pass True if the administrator can delete messages of other users",
                        null=True,
                    ),
                ),
                (
                    "can_manage_video_chats",
                    models.BooleanField(
                        blank=True,
                        help_text="Pass True if the administrator can manage video chats",
                        null=True,
                    ),
                ),
                (
                    "can_restrict_members",
                    models.BooleanField(
                        blank=True,
                        help_text="Pass True if the administrator can restrict, ban or unban chat members, or access supergroup statistics",
                        null=True,
                    ),
                ),
                (
                    "can_promote_members",
                    models.BooleanField(
                        blank=True,
                        help_text="Pass True if the administrator can add new administrators with a subset of their own privileges or demote administrators that they have promoted, directly or indirectly (promoted by administrators that were appointed by him)",
                        null=True,
                    ),
                ),
                (
                    "can_change_info",
                    models.BooleanField(
                        blank=True,
                        help_text="Pass True if the administrator can change chat title, photo and other settings",
                        null=True,
                    ),
                ),
                (
                    "can_invite_users",
                    models.BooleanField(
                        blank=True,
                        help_text="Pass True if the administrator can invite new users to the chat",
                        null=True,
                    ),
                ),
                (
                    "can_post_stories",
                    models.BooleanField(
                        blank=True,
                        help_text="Pass True if the administrator can post stories to the chat",
                        null=True,
                    ),
                ),
                (
                    "can_edit_stories",
                    models.BooleanField(
                        blank=True,
                        help_text="Pass True if the administrator can edit stories posted by other users, post stories to the chat page, pin chat stories, and access the chat's story archive",
                        null=True,
                    ),
                ),
                (
                    "can_delete_stories",
                    models.BooleanField(
                        blank=True,
                        help_text="Pass True if the administrator can delete stories posted by other users",
                        null=True,
                    ),
                ),
                (
                    "can_post_messages",
                    models.BooleanField(
                        blank=True,
                        help_text="Pass True if the administrator can post messages in the channel, or access channel statistics; for channels only",
                        null=True,
                    ),
                ),
                (
                    "can_edit_messages",
                    models.BooleanField(
                        blank=True,
                        help_text="Pass True if the administrator can edit messages of other users and can pin messages; for channels only",
                        null=True,
                    ),
                ),
                (
                    "can_pin_messages",
                    models.BooleanField(
                        blank=True,
                        help_text="Pass True if the administrator can pin messages; for supergroups only",
                        null=True,
                    ),
                ),
                (
                    "can_manage_topics",
                    models.BooleanField(
                        blank=True,
                        help_text="Pass True if the user is allowed to create, rename, close, and reopen forum topics; for supergroups only",
                        null=True,
                    ),
                ),
            ],
            bases=("component.component",),
        ),
        migrations.CreateModel(
            name="ReadBusinessMessage",
            fields=[
                (
                    "component_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="component.component",
                    ),
                ),
                (
                    "business_connection_id",
                    models.CharField(
                        blank=True,
                        help_text="Unique identifier of the business connection on behalf of which to read the message",
                        null=True,
                    ),
                ),
                (
                    "chat_id",
                    models.IntegerField(
                        blank=True,
                        help_text="Unique identifier of the chat in which the message was received. The chat must have been active in the last 24 hours.",
                        null=True,
                    ),
                ),
                (
                    "message_id",
                    models.IntegerField(
                        blank=True,
                        help_text="Unique identifier of the message to mark as read",
                        null=True,
                    ),
                ),
            ],
            bases=("component.component",),
        ),
        migrations.CreateModel(
            name="RefundStarPayment",
            fields=[
                (
                    "component_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="component.component",
                    ),
                ),
                (
                    "user_id",
                    models.IntegerField(
                        blank=True,
                        help_text="Identifier of the user whose payment will be refunded",
                        null=True,
                    ),
                ),
                (
                    "telegram_payment_charge_id",
                    models.CharField(
                        blank=True,
                        help_text="Telegram payment identifier",
                        null=True,
                    ),
                ),
            ],
            bases=("component.component",),
        ),
        migrations.CreateModel(
            name="RemoveBusinessAccountProfilePhoto",
            fields=[
                (
                    "component_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="component.component",
                    ),
                ),
                (
                    "business_connection_id",
                    models.CharField(
                        blank=True,
                        help_text="Unique identifier of the business connection",
                        null=True,
                    ),
                ),
                (
                    "is_public",
                    models.BooleanField(
                        blank=True,
                        help_text="Pass True to remove the public photo, which is visible even if the main photo is hidden by the business account's privacy settings. After the main photo is removed, the previous profile photo (if present) becomes the main photo.",
                        null=True,
                    ),
                ),
            ],
            bases=("component.component",),
        ),
        migrations.CreateModel(
            name="RemoveChatVerification",
            fields=[
                (
                    "component_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="component.component",
                    ),
                ),
                (
                    "chat_id",
                    models.CharField(
                        blank=True,
                        help_text="Unique identifier for the target chat or username of the target channel (in the format @channelusername)",
                        null=True,
                    ),
                ),
            ],
            bases=("component.component",),
        ),
        migrations.CreateModel(
            name="RemoveUserVerification",
            fields=[
                (
                    "component_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="component.component",
                    ),
                ),
                (
                    "user_id",
                    models.IntegerField(
                        blank=True,
                        help_text="Unique identifier of the target user",
                        null=True,
                    ),
                ),
            ],
            bases=("component.component",),
        ),
        migrations.CreateModel(
            name="ReopenForumTopic",
            fields=[
                (
                    "component_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="component.component",
                    ),
                ),
                (
                    "chat_id",
                    models.CharField(
                        blank=True,
                        help_text="Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername)",
                        null=True,
                    ),
                ),
                (
                    "message_thread_id",
                    models.IntegerField(
                        blank=True,
                        help_text="Unique identifier for the target message thread of the forum topic",
                        null=True,
                    ),
                ),
            ],
            bases=("component.component",),
        ),
        migrations.CreateModel(
            name="ReopenGeneralForumTopic",
            fields=[
                (
                    "component_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="component.component",
                    ),
                ),
                (
                    "chat_id",
                    models.CharField(
                        blank=True,
                        help_text="Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername)",
                        null=True,
                    ),
                ),
            ],
            bases=("component.component",),
        ),
        migrations.CreateModel(
            name="ReplaceStickerInSet",
            fields=[
                (
                    "component_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="component.component",
                    ),
                ),
                (
                    "user_id",
                    models.IntegerField(
                        blank=True,
                        help_text="User identifier of the sticker set owner",
                        null=True,
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        blank=True,
                        help_text="Sticker set name",
                        null=True,
                    ),
                ),
                (
                    "old_sticker",
                    models.CharField(
                        blank=True,
                        help_text="File identifier of the replaced sticker",
                        null=True,
                    ),
                ),
            ],
            bases=("component.component",),
        ),
        migrations.CreateModel(
            name="RestrictChatMember",
            fields=[
                (
                    "component_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="component.component",
                    ),
                ),
                (
                    "chat_id",
                    models.CharField(
                        blank=True,
                        help_text="Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername)",
                        null=True,
                    ),
                ),
                (
                    "user_id",
                    models.IntegerField(
                        blank=True,
                        help_text="Unique identifier of the target user",
                        null=True,
                    ),
                ),
                (
                    "use_independent_chat_permissions",
                    models.BooleanField(
                        blank=True,
                        help_text="Pass True if chat permissions are set independently. Otherwise, the can_send_other_messages and can_add_web_page_previews permissions will imply the can_send_messages, can_send_audios, can_send_documents, can_send_photos, can_send_videos, can_send_video_notes, and can_send_voice_notes permissions; the can_send_polls permission will imply the can_send_messages permission.",
                        null=True,
                    ),
                ),
                (
                    "until_date",
                    models.IntegerField(
                        blank=True,
                        help_text="Date when restrictions will be lifted for the user; Unix time. If user is restricted for more than 366 days or less than 30 seconds from the current time, they are considered to be restricted forever",
                        null=True,
                    ),
                ),
            ],
            bases=("component.component",),
        ),
        migrations.CreateModel(
            name="RevokeChatInviteLink",
            fields=[
                (
                    "component_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="component.component",
                    ),
                ),
                (
                    "chat_id",
                    models.CharField(
                        blank=True,
                        help_text="Unique identifier of the target chat or username of the target channel (in the format @channelusername)",
                        null=True,
                    ),
                ),
                (
                    "invite_link",
                    models.CharField(
                        blank=True,
                        help_text="The invite link to revoke",
                        null=True,
                    ),
                ),
            ],
            bases=("component.component",),
        ),
        migrations.CreateModel(
            name="SavePreparedInlineMessage",
            fields=[
                (
                    "component_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="component.component",
                    ),
                ),
                (
                    "user_id",
                    models.IntegerField(
                        blank=True,
                        help_text="Unique identifier of the target user that can use the prepared message",
                        null=True,
                    ),
                ),
                (
                    "allow_user_chats",
                    models.BooleanField(
                        blank=True,
                        help_text="Pass True if the message can be sent to private chats with users",
                        null=True,
                    ),
                ),
                (
                    "allow_bot_chats",
                    models.BooleanField(
                        blank=True,
                        help_text="Pass True if the message can be sent to private chats with bots",
                        null=True,
                    ),
                ),
                (
                    "allow_group_chats",
                    models.BooleanField(
                        blank=True,
                        help_text="Pass True if the message can be sent to group and supergroup chats",
                        null=True,
                    ),
                ),
                (
                    "allow_channel_chats",
                    models.BooleanField(
                        blank=True,
                        help_text="Pass True if the message can be sent to channel chats",
                        null=True,
                    ),
                ),
            ],
            bases=("component.component",),
        ),
        migrations.CreateModel(
            name="SendGift",
            fields=[
                (
                    "component_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="component.component",
                    ),
                ),
                (
                    "user_id",
                    models.IntegerField(
                        blank=True,
                        help_text="Required if chat_id is not specified. Unique identifier of the target user who will receive the gift.",
                        null=True,
                    ),
                ),
                (
                    "chat_id",
                    models.CharField(
                        blank=True,
                        help_text="Required if user_id is not specified. Unique identifier for the chat or username of the channel (in the format @channelusername) that will receive the gift.",
                        null=True,
                    ),
                ),
                (
                    "gift_id",
                    models.CharField(
                        blank=True,
                        help_text="Identifier of the gift",
                        null=True,
                    ),
                ),
                (
                    "pay_for_upgrade",
                    models.BooleanField(
                        blank=True,
                        help_text="Pass True to pay for the gift upgrade from the bot's balance, thereby making the upgrade free for the receiver",
                        null=True,
                    ),
                ),
                (
                    "text",
                    models.CharField(
                        blank=True,
                        help_text="Text that will be shown along with the gift; 0-128 characters",
                        max_length=128,
                        null=True,
                    ),
                ),
                (
                    "text_parse_mode",
                    models.CharField(
                        blank=True,
                        help_text="Mode for parsing entities in the text. See formatting options for more details. Entities other than “bold”, “italic”, “underline”, “strikethrough”, “spoiler”, and “custom_emoji” are ignored.",
                        null=True,
                    ),
                ),
            ],
            bases=("component.component",),
        ),
        migrations.CreateModel(
            name="SendMediaGroup",
            fields=[
                (
                    "component_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="component.component",
                    ),
                ),
                (
                    "business_connection_id",
                    models.CharField(
                        blank=True,
                        help_text="Unique identifier of the business connection on behalf of which the message will be sent",
                        null=True,
                    ),
                ),
                (
                    "chat_id",
                    models.CharField(
                        blank=True,
                        help_text="Unique identifier for the target chat or username of the target channel (in the format @channelusername)",
                        null=True,
                    ),
                ),
                (
                    "message_thread_id",
                    models.IntegerField(
                        blank=True,
                        help_text="Unique identifier for the target message thread (topic) of the forum; for forum supergroups only",
                        null=True,
                    ),
                ),
                (
                    "disable_notification",
                    models.BooleanField(
                        blank=True,
                        help_text="Sends messages silently. Users will receive a notification with no sound.",
                        null=True,
                    ),
                ),
                (
                    "protect_content",
                    models.BooleanField(
                        blank=True,
                        help_text="Protects the contents of the sent messages from forwarding and saving",
                        null=True,
                    ),
                ),
                (
                    "allow_paid_broadcast",
                    models.BooleanField(
                        blank=True,
                        help_text="Pass True to allow up to 1000 messages per second, ignoring broadcasting limits for a fee of 0.1 Telegram Stars per message. The relevant Stars will be withdrawn from the bot's balance",
                        null=True,
                    ),
                ),
                (
                    "message_effect_id",
                    models.CharField(
                        blank=True,
                        help_text="Unique identifier of the message effect to be added to the message; for private chats only",
                        null=True,
                    ),
                ),
            ],
            bases=("component.component",),
        ),
        migrations.CreateModel(
            name="SetBusinessAccountBio",
            fields=[
                (
                    "component_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="component.component",
                    ),
                ),
                (
                    "business_connection_id",
                    models.CharField(
                        blank=True,
                        help_text="Unique identifier of the business connection",
                        null=True,
                    ),
                ),
                (
                    "bio",
                    models.CharField(
                        blank=True,
                        help_text="The new value of the bio for the business account; 0-140 characters",
                        max_length=140,
                        null=True,
                    ),
                ),
            ],
            bases=("component.component",),
        ),
        migrations.CreateModel(
            name="SetBusinessAccountGiftSettings",
            fields=[
                (
                    "component_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="component.component",
                    ),
                ),
                (
                    "business_connection_id",
                    models.CharField(
                        blank=True,
                        help_text="Unique identifier of the business connection",
                        null=True,
                    ),
                ),
                (
                    "show_gift_button",
                    models.BooleanField(
                        blank=True,
                        help_text="Pass True, if a button for sending a gift to the user or by the business account must always be shown in the input field",
                        null=True,
                    ),
                ),
            ],
            bases=("component.component",),
        ),
        migrations.CreateModel(
            name="SetBusinessAccountName",
            fields=[
                (
                    "component_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="component.component",
                    ),
                ),
                (
                    "business_connection_id",
                    models.CharField(
                        blank=True,
                        help_text="Unique identifier of the business connection",
                        null=True,
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True,
                        help_text="The new value of the first name for the business account; 1-64 characters",
                        max_length=64,
                        null=True,
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True,
                        help_text="The new value of the last name for the business account; 0-64 characters",
                        max_length=64,
                        null=True,
                    ),
                ),
            ],
            bases=("component.component",),
        ),
        migrations.CreateModel(
            name="SetBusinessAccountProfilePhoto",
            fields=[
                (
                    "component_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="component.component",
                    ),
                ),
                (
                    "business_connection_id",
                    models.CharField(
                        blank=True,
                        help_text="Unique identifier of the business connection",
                        null=True,
                    ),
                ),
                (
                    "is_public",
                    models.BooleanField(
                        blank=True,
                        help_text="Pass True to set the public photo, which will be visible even if the main photo is hidden by the business account's privacy settings. An account can have only one public photo.",
                        null=True,
                    ),
                ),
            ],
            bases=("component.component",),
        ),
        migrations.CreateModel(
            name="SetBusinessAccountUsername",
            fields=[
                (
                    "component_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="component.component",
                    ),
                ),
                (
                    "business_connection_id",
                    models.CharField(
                        blank=True,
                        help_text="Unique identifier of the business connection",
                        null=True,
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        blank=True,
                        help_text="The new value of the username for the business account; 0-32 characters",
                        max_length=32,
                        null=True,
                    ),
                ),
            ],
            bases=("component.component",),
        ),
        migrations.CreateModel(
            name="SetChatAdministratorCustomTitle",
            fields=[
                (
                    "component_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="component.component",
                    ),
                ),
                (
                    "chat_id",
                    models.CharField(
                        blank=True,
                        help_text="Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername)",
                        null=True,
                    ),
                ),
                (
                    "user_id",
                    models.IntegerField(
                        blank=True,
                        help_text="Unique identifier of the target user",
                        null=True,
                    ),
                ),
                (
                    "custom_title",
                    models.CharField(
                        blank=True,
                        help_text="New custom title for the administrator; 0-16 characters, emoji are not allowed",
                        max_length=16,
                        null=True,
                    ),
                ),
            ],
            bases=("component.component",),
        ),
        migrations.CreateModel(
            name="SetChatDescription",
            fields=[
                (
                    "component_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="component.component",
                    ),
                ),
                (
                    "chat_id",
                    models.CharField(
                        blank=True,
                        help_text="Unique identifier for the target chat or username of the target channel (in the format @channelusername)",
                        null=True,
                    ),
                ),
                (
                    "description",
                    models.CharField(
                        blank=True,
                        help_text="New chat description, 0-255 characters",
                        max_length=255,
                        null=True,
                    ),
                ),
            ],
            bases=("component.component",),
        ),
        migrations.CreateModel(
            name="SetChatMenuButton",
            fields=[
                (
                    "component_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="component.component",
                    ),
                ),
                (
                    "chat_id",
                    models.IntegerField(
                        blank=True,
                        help_text="Unique identifier for the target private chat. If not specified, default bot's menu button will be changed",
                        null=True,
                    ),
                ),
            ],
            bases=("component.component",),
        ),
        migrations.CreateModel(
            name="SetChatPermissions",
            fields=[
                (
                    "component_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="component.component",
                    ),
                ),
                (
                    "chat_id",
                    models.CharField(
                        blank=True,
                        help_text="Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername)",
                        null=True,
                    ),
                ),
                (
                    "use_independent_chat_permissions",
                    models.BooleanField(
                        blank=True,
                        help_text="Pass True if chat permissions are set independently. Otherwise, the can_send_other_messages and can_add_web_page_previews permissions will imply the can_send_messages, can_send_audios, can_send_documents, can_send_photos, can_send_videos, can_send_video_notes, and can_send_voice_notes permissions; the can_send_polls permission will imply the can_send_messages permission.",
                        null=True,
                    ),
                ),
            ],
            bases=("component.component",),
        ),
        migrations.CreateModel(
            name="SetChatPhoto",
            fields=[
                (
                    "component_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="component.component",
                    ),
                ),
                (
                    "chat_id",
                    models.CharField(
                        blank=True,
                        help_text="Unique identifier for the target chat or username of the target channel (in the format @channelusername)",
                        null=True,
                    ),
                ),
            ],
            bases=("component.component",),
        ),
        migrations.CreateModel(
            name="SetChatStickerSet",
            fields=[
                (
                    "component_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="component.component",
                    ),
                ),
                (
                    "chat_id",
                    models.CharField(
                        blank=True,
                        help_text="Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername)",
                        null=True,
                    ),
                ),
                (
                    "sticker_set_name",
                    models.CharField(
                        blank=True,
                        help_text="Name of the sticker set to be set as the group sticker set",
                        null=True,
                    ),
                ),
            ],
            bases=("component.component",),
        ),
        migrations.CreateModel(
            name="SetChatTitle",
            fields=[
                (
                    "component_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="component.component",
                    ),
                ),
                (
                    "chat_id",
                    models.CharField(
                        blank=True,
                        help_text="Unique identifier for the target chat or username of the target channel (in the format @channelusername)",
                        null=True,
                    ),
                ),
                (
                    "title",
                    models.CharField(
                        blank=True,
                        help_text="New chat title, 1-128 characters",
                        max_length=128,
                        null=True,
                    ),
                ),
            ],
            bases=("component.component",),
        ),
        migrations.CreateModel(
            name="SetCustomEmojiStickerSetThumbnail",
            fields=[
                (
                    "component_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="component.component",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        blank=True,
                        help_text="Sticker set name",
                        null=True,
                    ),
                ),
                (
                    "custom_emoji_id",
                    models.CharField(
                        blank=True,
                        help_text="Custom emoji identifier of a sticker from the sticker set; pass an empty string to drop the thumbnail and use the first sticker as the thumbnail.",
                        null=True,
                    ),
                ),
            ],
            bases=("component.component",),
        ),
        migrations.CreateModel(
            name="SetGameScore",
            fields=[
                (
                    "component_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="component.component",
                    ),
                ),
                (
                    "user_id",
                    models.IntegerField(
                        blank=True,
                        help_text="User identifier",
                        null=True,
                    ),
                ),
                (
                    "score",
                    models.IntegerField(
                        blank=True,
                        help_text="New score, must be non-negative",
                        null=True,
                    ),
                ),
                (
                    "force",
                    models.BooleanField(
                        blank=True,
                        help_text="Pass True if the high score is allowed to decrease. This can be useful when fixing mistakes or banning cheaters",
                        null=True,
                    ),
                ),
                (
                    "disable_edit_message",
                    models.BooleanField(
                        blank=True,
                        help_text="Pass True if the game message should not be automatically edited to include the current scoreboard",
                        null=True,
                    ),
                ),
                (
                    "chat_id",
                    models.IntegerField(
                        blank=True,
                        help_text="Required if inline_message_id is not specified. Unique identifier for the target chat",
                        null=True,
                    ),
                ),
                (
                    "message_id",
                    models.IntegerField(
                        blank=True,
                        help_text="Required if inline_message_id is not specified. Identifier of the sent message",
                        null=True,
                    ),
                ),
                (
                    "inline_message_id",
                    models.CharField(
                        blank=True,
                        help_text="Required if chat_id and message_id are not specified. Identifier of the inline message",
                        null=True,
                    ),
                ),
            ],
            bases=("component.component",),
        ),
        migrations.CreateModel(
            name="SetMessageReaction",
            fields=[
                (
                    "component_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="component.component",
                    ),
                ),
                (
                    "chat_id",
                    models.CharField(
                        blank=True,
                        help_text="Unique identifier for the target chat or username of the target channel (in the format @channelusername)",
                        null=True,
                    ),
                ),
                (
                    "message_id",
                    models.IntegerField(
                        blank=True,
                        help_text="Identifier of the target message. If the message belongs to a media group, the reaction is set to the first non-deleted message in the group instead.",
                        null=True,
                    ),
                ),
                (
                    "is_big",
                    models.BooleanField(
                        blank=True,
                        help_text="Pass True to set the reaction with a big animation",
                        null=True,
                    ),
                ),
            ],
            bases=("component.component",),
        ),
        migrations.CreateModel(
            name="SetMyCommands",
            fields=[
                (
                    "component_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="component.component",
                    ),
                ),
                (
                    "language_code",
                    models.CharField(
                        blank=True,
                        help_text="A two-letter ISO 639-1 language code. If empty, commands will be applied to all users from the given scope, for whose language there are no dedicated commands",
                        null=True,
                    ),
                ),
            ],
            bases=("component.component",),
        ),
        migrations.CreateModel(
            name="SetMyDefaultAdministratorRights",
            fields=[
                (
                    "component_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="component.component",
                    ),
                ),
                (
                    "for_channels",
                    models.BooleanField(
                        blank=True,
                        help_text="Pass True to change the default administrator rights of the bot in channels. Otherwise, the default administrator rights of the bot for groups and supergroups will be changed.",
                        null=True,
                    ),
                ),
            ],
            bases=("component.component",),
        ),
        migrations.CreateModel(
            name="SetMyDescription",
            fields=[
                (
                    "component_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="component.component",
                    ),
                ),
                (
                    "description",
                    models.CharField(
                        blank=True,
                        help_text="New bot description; 0-512 characters. Pass an empty string to remove the dedicated description for the given language.",
                        max_length=512,
                        null=True,
                    ),
                ),
                (
                    "language_code",
                    models.CharField(
                        blank=True,
                        help_text="A two-letter ISO 639-1 language code. If empty, the description will be applied to all users for whose language there is no dedicated description.",
                        null=True,
                    ),
                ),
            ],
            bases=("component.component",),
        ),
        migrations.CreateModel(
            name="SetMyName",
            fields=[
                (
                    "component_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="component.component",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        blank=True,
                        help_text="New bot name; 0-64 characters. Pass an empty string to remove the dedicated name for the given language.",
                        max_length=64,
                        null=True,
                    ),
                ),
                (
                    "language_code",
                    models.CharField(
                        blank=True,
                        help_text="A two-letter ISO 639-1 language code. If empty, the name will be shown to all users for whose language there is no dedicated name.",
                        null=True,
                    ),
                ),
            ],
            bases=("component.component",),
        ),
        migrations.CreateModel(
            name="SetMyShortDescription",
            fields=[
                (
                    "component_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="component.component",
                    ),
                ),
                (
                    "short_description",
                    models.CharField(
                        blank=True,
                        help_text="New short description for the bot; 0-120 characters. Pass an empty string to remove the dedicated short description for the given language.",
                        max_length=120,
                        null=True,
                    ),
                ),
                (
                    "language_code",
                    models.CharField(
                        blank=True,
                        help_text="A two-letter ISO 639-1 language code. If empty, the short description will be applied to all users for whose language there is no dedicated short description.",
                        null=True,
                    ),
                ),
            ],
            bases=("component.component",),
        ),
        migrations.CreateModel(
            name="SetState",
            fields=[
                (
                    "component_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="component.component",
                    ),
                ),
                (
                    "state",
                    models.CharField(
                        blank=True,
                        help_text="Name of state. Should not contain comma",
                        max_length=4096,
                        null=True,
                    ),
                ),
            ],
            bases=("component.component",),
        ),
        migrations.CreateModel(
            name="SetStickerEmojiList",
            fields=[
                (
                    "component_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="component.component",
                    ),
                ),
                (
                    "sticker",
                    models.CharField(
                        blank=True,
                        help_text="File identifier of the sticker",
                        null=True,
                    ),
                ),
                (
                    "emoji_list",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(),
                        blank=True,
                        default=list,
                        help_text="A JSON-serialized list of 1-20 emoji associated with the sticker",
                        null=True,
                        size=None,
                    ),
                ),
            ],
            bases=("component.component",),
        ),
        migrations.CreateModel(
            name="SetStickerKeywords",
            fields=[
                (
                    "component_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="component.component",
                    ),
                ),
                (
                    "sticker",
                    models.CharField(
                        blank=True,
                        help_text="File identifier of the sticker",
                        null=True,
                    ),
                ),
                (
                    "keywords",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(),
                        blank=True,
                        default=list,
                        help_text="A JSON-serialized list of 0-20 search keywords for the sticker with total length of up to 64 characters",
                        null=True,
                        size=None,
                    ),
                ),
            ],
            bases=("component.component",),
        ),
        migrations.CreateModel(
            name="SetStickerMaskPosition",
            fields=[
                (
                    "component_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="component.component",
                    ),
                ),
                (
                    "sticker",
                    models.CharField(
                        blank=True,
                        help_text="File identifier of the sticker",
                        null=True,
                    ),
                ),
            ],
            bases=("component.component",),
        ),
        migrations.CreateModel(
            name="SetStickerPositionInSet",
            fields=[
                (
                    "component_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="component.component",
                    ),
                ),
                (
                    "sticker",
                    models.CharField(
                        blank=True,
                        help_text="File identifier of the sticker",
                        null=True,
                    ),
                ),
                (
                    "position",
                    models.IntegerField(
                        blank=True,
                        help_text="New sticker position in the set, zero-based",
                        null=True,
                    ),
                ),
            ],
            bases=("component.component",),
        ),
        migrations.CreateModel(
            name="SetStickerSetThumbnail",
            fields=[
                (
                    "component_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="component.component",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        blank=True,
                        help_text="Sticker set name",
                        null=True,
                    ),
                ),
                (
                    "user_id",
                    models.IntegerField(
                        blank=True,
                        help_text="User identifier of the sticker set owner",
                        null=True,
                    ),
                ),
                (
                    "thumbnail",
                    models.FileField(
                        blank=True,
                        help_text="A .WEBP or .PNG image with the thumbnail, must be up to 128 kilobytes in size and have a width and height of exactly 100px, or a .TGS animation with a thumbnail up to 32 kilobytes in size (see https://core.telegram.org/stickers#animation-requirements for animated sticker technical requirements), or a .WEBM video with the thumbnail up to 32 kilobytes in size; see https://core.telegram.org/stickers#video-requirements for video sticker technical requirements. Pass a file_id as a String to send a file that already exists on the Telegram servers, pass an HTTP URL as a String for Telegram to get a file from the Internet, or upload a new one using multipart/form-data. More information on Sending Files ». Animated and video sticker set thumbnails can't be uploaded via HTTP URL. If omitted, then the thumbnail is dropped and the first sticker is used as the thumbnail.",
                        null=True,
                        upload_to="thumbnail/",
                    ),
                ),
                (
                    "format",
                    models.CharField(
                        blank=True,
                        help_text="Format of the thumbnail, must be one of “static” for a .WEBP or .PNG image, “animated” for a .TGS animation, or “video” for a .WEBM video",
                        null=True,
                    ),
                ),
            ],
            bases=("component.component",),
        ),
        migrations.CreateModel(
            name="SetStickerSetTitle",
            fields=[
                (
                    "component_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="component.component",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        blank=True,
                        help_text="Sticker set name",
                        null=True,
                    ),
                ),
                (
                    "title",
                    models.CharField(
                        blank=True,
                        help_text="Sticker set title, 1-64 characters",
                        max_length=64,
                        null=True,
                    ),
                ),
            ],
            bases=("component.component",),
        ),
        migrations.CreateModel(
            name="SetUserEmojiStatus",
            fields=[
                (
                    "component_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="component.component",
                    ),
                ),
                (
                    "user_id",
                    models.IntegerField(
                        blank=True,
                        help_text="Unique identifier of the target user",
                        null=True,
                    ),
                ),
                (
                    "emoji_status_custom_emoji_id",
                    models.CharField(
                        blank=True,
                        help_text="Custom emoji identifier of the emoji status to set. Pass an empty string to remove the status.",
                        null=True,
                    ),
                ),
                (
                    "emoji_status_expiration_date",
                    models.IntegerField(
                        blank=True,
                        help_text="Expiration date of the emoji status, if any",
                        null=True,
                    ),
                ),
            ],
            bases=("component.component",),
        ),
        migrations.CreateModel(
            name="TransferBusinessAccountStars",
            fields=[
                (
                    "component_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="component.component",
                    ),
                ),
                (
                    "business_connection_id",
                    models.CharField(
                        blank=True,
                        help_text="Unique identifier of the business connection",
                        null=True,
                    ),
                ),
                (
                    "star_count",
                    models.IntegerField(
                        blank=True,
                        help_text="Number of Telegram Stars to transfer; 1-10000",
                        null=True,
                    ),
                ),
            ],
            bases=("component.component",),
        ),
        migrations.CreateModel(
            name="TransferGift",
            fields=[
                (
                    "component_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="component.component",
                    ),
                ),
                (
                    "business_connection_id",
                    models.CharField(
                        blank=True,
                        help_text="Unique identifier of the business connection",
                        null=True,
                    ),
                ),
                (
                    "owned_gift_id",
                    models.CharField(
                        blank=True,
                        help_text="Unique identifier of the regular gift that should be transferred",
                        null=True,
                    ),
                ),
                (
                    "new_owner_chat_id",
                    models.IntegerField(
                        blank=True,
                        help_text="Unique identifier of the chat which will own the gift. The chat must be active in the last 24 hours.",
                        null=True,
                    ),
                ),
                (
                    "star_count",
                    models.IntegerField(
                        blank=True,
                        help_text="The amount of Telegram Stars that will be paid for the transfer from the business account balance. If positive, then the can_transfer_stars business bot right is required.",
                        null=True,
                    ),
                ),
            ],
            bases=("component.component",),
        ),
        migrations.CreateModel(
            name="UnbanChatMember",
            fields=[
                (
                    "component_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="component.component",
                    ),
                ),
                (
                    "chat_id",
                    models.CharField(
                        blank=True,
                        help_text="Unique identifier for the target group or username of the target supergroup or channel (in the format @channelusername)",
                        null=True,
                    ),
                ),
                (
                    "user_id",
                    models.IntegerField(
                        blank=True,
                        help_text="Unique identifier of the target user",
                        null=True,
                    ),
                ),
                (
                    "only_if_banned",
                    models.BooleanField(
                        blank=True,
                        help_text="Do nothing if the user is not banned",
                        null=True,
                    ),
                ),
            ],
            bases=("component.component",),
        ),
        migrations.CreateModel(
            name="UnbanChatSenderChat",
            fields=[
                (
                    "component_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="component.component",
                    ),
                ),
                (
                    "chat_id",
                    models.CharField(
                        blank=True,
                        help_text="Unique identifier for the target chat or username of the target channel (in the format @channelusername)",
                        null=True,
                    ),
                ),
                (
                    "sender_chat_id",
                    models.IntegerField(
                        blank=True,
                        help_text="Unique identifier of the target sender chat",
                        null=True,
                    ),
                ),
            ],
            bases=("component.component",),
        ),
        migrations.CreateModel(
            name="UnhideGeneralForumTopic",
            fields=[
                (
                    "component_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="component.component",
                    ),
                ),
                (
                    "chat_id",
                    models.CharField(
                        blank=True,
                        help_text="Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername)",
                        null=True,
                    ),
                ),
            ],
            bases=("component.component",),
        ),
        migrations.CreateModel(
            name="UnpinAllChatMessages",
            fields=[
                (
                    "component_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="component.component",
                    ),
                ),
                (
                    "chat_id",
                    models.CharField(
                        blank=True,
                        help_text="Unique identifier for the target chat or username of the target channel (in the format @channelusername)",
                        null=True,
                    ),
                ),
            ],
            bases=("component.component",),
        ),
        migrations.CreateModel(
            name="UnpinAllForumTopicMessages",
            fields=[
                (
                    "component_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="component.component",
                    ),
                ),
                (
                    "chat_id",
                    models.CharField(
                        blank=True,
                        help_text="Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername)",
                        null=True,
                    ),
                ),
                (
                    "message_thread_id",
                    models.IntegerField(
                        blank=True,
                        help_text="Unique identifier for the target message thread of the forum topic",
                        null=True,
                    ),
                ),
            ],
            bases=("component.component",),
        ),
        migrations.CreateModel(
            name="UnpinAllGeneralForumTopicMessages",
            fields=[
                (
                    "component_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="component.component",
                    ),
                ),
                (
                    "chat_id",
                    models.CharField(
                        blank=True,
                        help_text="Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername)",
                        null=True,
                    ),
                ),
            ],
            bases=("component.component",),
        ),
        migrations.CreateModel(
            name="UnpinChatMessage",
            fields=[
                (
                    "component_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="component.component",
                    ),
                ),
                (
                    "business_connection_id",
                    models.CharField(
                        blank=True,
                        help_text="Unique identifier of the business connection on behalf of which the message will be unpinned",
                        null=True,
                    ),
                ),
                (
                    "chat_id",
                    models.CharField(
                        blank=True,
                        help_text="Unique identifier for the target chat or username of the target channel (in the format @channelusername)",
                        null=True,
                    ),
                ),
                (
                    "message_id",
                    models.IntegerField(
                        blank=True,
                        help_text="Identifier of the message to unpin. Required if business_connection_id is specified. If not specified, the most recent pinned message (by sending date) will be unpinned.",
                        null=True,
                    ),
                ),
            ],
            bases=("component.component",),
        ),
        migrations.CreateModel(
            name="UpgradeGift",
            fields=[
                (
                    "component_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="component.component",
                    ),
                ),
                (
                    "business_connection_id",
                    models.CharField(
                        blank=True,
                        help_text="Unique identifier of the business connection",
                        null=True,
                    ),
                ),
                (
                    "owned_gift_id",
                    models.CharField(
                        blank=True,
                        help_text="Unique identifier of the regular gift that should be upgraded to a unique one",
                        null=True,
                    ),
                ),
                (
                    "keep_original_details",
                    models.BooleanField(
                        blank=True,
                        help_text="Pass True to keep the original gift text, sender and receiver in the upgraded gift",
                        null=True,
                    ),
                ),
                (
                    "star_count",
                    models.IntegerField(
                        blank=True,
                        help_text="The amount of Telegram Stars that will be paid for the upgrade from the business account balance. If gift.prepaid_upgrade_star_count > 0, then pass 0, otherwise, the can_transfer_stars business bot right is required and gift.upgrade_star_count must be passed.",
                        null=True,
                    ),
                ),
            ],
            bases=("component.component",),
        ),
        migrations.CreateModel(
            name="UploadStickerFile",
            fields=[
                (
                    "component_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="component.component",
                    ),
                ),
                (
                    "user_id",
                    models.IntegerField(
                        blank=True,
                        help_text="User identifier of sticker file owner",
                        null=True,
                    ),
                ),
                (
                    "sticker_format",
                    models.CharField(
                        blank=True,
                        help_text="Format of the sticker, must be one of “static”, “animated”, “video”",
                        null=True,
                    ),
                ),
            ],
            bases=("component.component",),
        ),
        migrations.CreateModel(
            name="VerifyChat",
            fields=[
                (
                    "component_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="component.component",
                    ),
                ),
                (
                    "chat_id",
                    models.CharField(
                        blank=True,
                        help_text="Unique identifier for the target chat or username of the target channel (in the format @channelusername)",
                        null=True,
                    ),
                ),
                (
                    "custom_description",
                    models.CharField(
                        blank=True,
                        help_text="Custom description for the verification; 0-70 characters. Must be empty if the organization isn't allowed to provide a custom verification description.",
                        max_length=70,
                        null=True,
                    ),
                ),
            ],
            bases=("component.component",),
        ),
        migrations.CreateModel(
            name="VerifyUser",
            fields=[
                (
                    "component_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="component.component",
                    ),
                ),
                (
                    "user_id",
                    models.IntegerField(
                        blank=True,
                        help_text="Unique identifier of the target user",
                        null=True,
                    ),
                ),
                (
                    "custom_description",
                    models.CharField(
                        blank=True,
                        help_text="Custom description for the verification; 0-70 characters. Must be empty if the organization isn't allowed to provide a custom verification description.",
                        max_length=70,
                        null=True,
                    ),
                ),
            ],
            bases=("component.component",),
        ),
        migrations.CreateModel(
            name="ForceReply",
            fields=[
                (
                    "keyboard_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="component.keyboard",
                    ),
                ),
                (
                    "force_reply",
                    models.BooleanField(
                        default=True,
                        help_text="Shows reply interface to the user, as if they manually selected the bot's message and tapped 'Reply'",
                    ),
                ),
                (
                    "input_field_placeholder",
                    models.CharField(
                        help_text="Optional. The placeholder to be shown in the input field when the reply is active; 1-64 characters",
                        max_length=64,
                    ),
                ),
                (
                    "selective",
                    models.BooleanField(
                        default=False,
                        help_text="Use this parameter if you want to force reply from specific users only",
                    ),
                ),
            ],
            bases=("component.keyboard",),
        ),
        migrations.CreateModel(
            name="ReplyKeyboardRemove",
            fields=[
                (
                    "keyboard_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="component.keyboard",
                    ),
                ),
                (
                    "remove_keyboard",
                    models.BooleanField(
                        default=True,
                        help_text="Requests clients to remove the custom keyboard (user will not be able to summon this keyboard; if you want to hide the keyboard from sight but keep it accessible, use one_time_keyboard in ReplyKeyboardMarkup)",
                    ),
                ),
                (
                    "selective",
                    models.BooleanField(
                        default=False,
                        help_text="Use this parameter if you want to remove the keyboard for specific users only",
                    ),
                ),
            ],
            bases=("component.keyboard",),
        ),
        migrations.CreateModel(
            name="Markup",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "markup_type",
                    models.CharField(
                        choices=[
                            ("InlineKeyboard", "Inlinekeyboard"),
                            ("ReplyKeyboard", "Replykeyboard"),
                        ],
                        help_text="Markup type",
                        max_length=20,
                    ),
                ),
                ("buttons", models.JSONField(help_text="Buttons to use")),
                (
                    "parent_component",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="markup",
                        to="component.component",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="CopyMessage",
            fields=[
                (
                    "component_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="component.component",
                    ),
                ),
                (
                    "chat_id",
                    models.CharField(
                        blank=True,
                        help_text="Unique identifier for the target chat or username of the target channel (in the format @channelusername)",
                        null=True,
                    ),
                ),
                (
                    "message_thread_id",
                    models.IntegerField(
                        blank=True,
                        help_text="Unique identifier for the target message thread (topic) of the forum; for forum supergroups only",
                        null=True,
                    ),
                ),
                (
                    "from_chat_id",
                    models.CharField(
                        blank=True,
                        help_text="Unique identifier for the chat where the original message was sent (or channel username in the format @channelusername)",
                        null=True,
                    ),
                ),
                (
                    "message_id",
                    models.IntegerField(
                        blank=True,
                        help_text="Message identifier in the chat specified in from_chat_id",
                        null=True,
                    ),
                ),
                (
                    "video_start_timestamp",
                    models.IntegerField(
                        blank=True,
                        help_text="New start timestamp for the copied video in the message",
                        null=True,
                    ),
                ),
                (
                    "caption",
                    models.CharField(
                        blank=True,
                        help_text="New caption for media, 0-1024 characters after entities parsing. If not specified, the original caption is kept",
                        max_length=1024,
                        null=True,
                    ),
                ),
                (
                    "parse_mode",
                    models.CharField(
                        blank=True,
                        help_text="Mode for parsing entities in the new caption. See formatting options for more details.",
                        null=True,
                    ),
                ),
                (
                    "show_caption_above_media",
                    models.BooleanField(
                        blank=True,
                        help_text="Pass True, if the caption must be shown above the message media. Ignored if a new caption isn't specified.",
                        null=True,
                    ),
                ),
                (
                    "disable_notification",
                    models.BooleanField(
                        blank=True,
                        help_text="Sends the message silently. Users will receive a notification with no sound.",
                        null=True,
                    ),
                ),
                (
                    "protect_content",
                    models.BooleanField(
                        blank=True,
                        help_text="Protects the contents of the sent message from forwarding and saving",
                        null=True,
                    ),
                ),
                (
                    "allow_paid_broadcast",
                    models.BooleanField(
                        blank=True,
                        help_text="Pass True to allow up to 1000 messages per second, ignoring broadcasting limits for a fee of 0.1 Telegram Stars per message. The relevant Stars will be withdrawn from the bot's balance",
                        null=True,
                    ),
                ),
                ("object_id", models.PositiveIntegerField(blank=True, null=True)),
                (
                    "content_type",
                    models.ForeignKey(
                        blank=True,
                        help_text="Additional interface options. A JSON-serialized object for an inline keyboard, custom reply keyboard, instructions to remove a reply keyboard or to force a reply from the user",
                        limit_choices_to=models.Q(
                            ("model", "inlinekeyboardmarkup"),
                            ("model", "replykeyboardmarkup"),
                            ("model", "replykeyboardremove"),
                            ("model", "forcereply"),
                            _connector="OR",
                        ),
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="contenttypes.contenttype",
                    ),
                ),
            ],
            bases=("component.component",),
        ),
        migrations.CreateModel(
            name="EditMessageCaption",
            fields=[
                (
                    "component_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="component.component",
                    ),
                ),
                (
                    "business_connection_id",
                    models.CharField(
                        blank=True,
                        help_text="Unique identifier of the business connection on behalf of which the message to be edited was sent",
                        null=True,
                    ),
                ),
                (
                    "chat_id",
                    models.CharField(
                        blank=True,
                        help_text="Required if inline_message_id is not specified. Unique identifier for the target chat or username of the target channel (in the format @channelusername)",
                        null=True,
                    ),
                ),
                (
                    "message_id",
                    models.IntegerField(
                        blank=True,
                        help_text="Required if inline_message_id is not specified. Identifier of the message to edit",
                        null=True,
                    ),
                ),
                (
                    "inline_message_id",
                    models.CharField(
                        blank=True,
                        help_text="Required if chat_id and message_id are not specified. Identifier of the inline message",
                        null=True,
                    ),
                ),
                (
                    "caption",
                    models.CharField(
                        blank=True,
                        help_text="New caption of the message, 0-1024 characters after entities parsing",
                        max_length=1024,
                        null=True,
                    ),
                ),
                (
                    "parse_mode",
                    models.CharField(
                        blank=True,
                        help_text="Mode for parsing entities in the message caption. See formatting options for more details.",
                        null=True,
                    ),
                ),
                (
                    "show_caption_above_media",
                    models.BooleanField(
                        blank=True,
                        help_text="Pass True, if the caption must be shown above the message media. Supported only for animation, photo and video messages.",
                        null=True,
                    ),
                ),
                ("object_id", models.PositiveIntegerField(blank=True, null=True)),
                (
                    "content_type",
                    models.ForeignKey(
                        blank=True,
                        help_text="A JSON-serialized object for an inline keyboard.",
                        limit_choices_to=models.Q(("model", "inlinekeyboardmarkup")),
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="contenttypes.contenttype",
                    ),
                ),
            ],
            bases=("component.component",),
        ),
        migrations.CreateModel(
            name="EditMessageLiveLocation",
            fields=[
                (
                    "component_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="component.component",
                    ),
                ),
                (
                    "business_connection_id",
                    models.CharField(
                        blank=True,
                        help_text="Unique identifier of the business connection on behalf of which the message to be edited was sent",
                        null=True,
                    ),
                ),
                (
                    "chat_id",
                    models.CharField(
                        blank=True,
                        help_text="Required if inline_message_id is not specified. Unique identifier for the target chat or username of the target channel (in the format @channelusername)",
                        null=True,
                    ),
                ),
                (
                    "message_id",
                    models.IntegerField(
                        blank=True,
                        help_text="Required if inline_message_id is not specified. Identifier of the message to edit",
                        null=True,
                    ),
                ),
                (
                    "inline_message_id",
                    models.CharField(
                        blank=True,
                        help_text="Required if chat_id and message_id are not specified. Identifier of the inline message",
                        null=True,
                    ),
                ),
                (
                    "latitude",
                    models.FloatField(
                        blank=True,
                        help_text="Latitude of new location",
                        null=True,
                    ),
                ),
                (
                    "longitude",
                    models.FloatField(
                        blank=True,
                        help_text="Longitude of new location",
                        null=True,
                    ),
                ),
                (
                    "live_period",
                    models.IntegerField(
                        blank=True,
                        help_text="New period in seconds during which the location can be updated, starting from the message send date. If 0x7FFFFFFF is specified, then the location can be updated forever. Otherwise, the new value must not exceed the current live_period by more than a day, and the live location expiration date must remain within the next 90 days. If not specified, then live_period remains unchanged",
                        null=True,
                    ),
                ),
                (
                    "horizontal_accuracy",
                    models.FloatField(
                        blank=True,
                        help_text="The radius of uncertainty for the location, measured in meters; 0-1500",
                        null=True,
                    ),
                ),
                (
                    "heading",
                    models.IntegerField(
                        blank=True,
                        help_text="Direction in which the user is moving, in degrees. Must be between 1 and 360 if specified.",
                        null=True,
                    ),
                ),
                (
                    "proximity_alert_radius",
                    models.IntegerField(
                        blank=True,
                        help_text="The maximum distance for proximity alerts about approaching another chat member, in meters. Must be between 1 and 100000 if specified.",
                        null=True,
                    ),
                ),
                ("object_id", models.PositiveIntegerField(blank=True, null=True)),
                (
                    "content_type",
                    models.ForeignKey(
                        blank=True,
                        help_text="A JSON-serialized object for a new inline keyboard.",
                        limit_choices_to=models.Q(("model", "inlinekeyboardmarkup")),
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="contenttypes.contenttype",
                    ),
                ),
            ],
            bases=("component.component",),
        ),
        migrations.CreateModel(
            name="EditMessageMedia",
            fields=[
                (
                    "component_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="component.component",
                    ),
                ),
                (
                    "business_connection_id",
                    models.CharField(
                        blank=True,
                        help_text="Unique identifier of the business connection on behalf of which the message to be edited was sent",
                        null=True,
                    ),
                ),
                (
                    "chat_id",
                    models.CharField(
                        blank=True,
                        help_text="Required if inline_message_id is not specified. Unique identifier for the target chat or username of the target channel (in the format @channelusername)",
                        null=True,
                    ),
                ),
                (
                    "message_id",
                    models.IntegerField(
                        blank=True,
                        help_text="Required if inline_message_id is not specified. Identifier of the message to edit",
                        null=True,
                    ),
                ),
                (
                    "inline_message_id",
                    models.CharField(
                        blank=True,
                        help_text="Required if chat_id and message_id are not specified. Identifier of the inline message",
                        null=True,
                    ),
                ),
                ("object_id", models.PositiveIntegerField(blank=True, null=True)),
                (
                    "content_type",
                    models.ForeignKey(
                        blank=True,
                        help_text="A JSON-serialized object for a new inline keyboard.",
                        limit_choices_to=models.Q(("model", "inlinekeyboardmarkup")),
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="contenttypes.contenttype",
                    ),
                ),
            ],
            bases=("component.component",),
        ),
        migrations.CreateModel(
            name="EditMessageReplyMarkup",
            fields=[
                (
                    "component_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="component.component",
                    ),
                ),
                (
                    "business_connection_id",
                    models.CharField(
                        blank=True,
                        help_text="Unique identifier of the business connection on behalf of which the message to be edited was sent",
                        null=True,
                    ),
                ),
                (
                    "chat_id",
                    models.CharField(
                        blank=True,
                        help_text="Required if inline_message_id is not specified. Unique identifier for the target chat or username of the target channel (in the format @channelusername)",
                        null=True,
                    ),
                ),
                (
                    "message_id",
                    models.IntegerField(
                        blank=True,
                        help_text="Required if inline_message_id is not specified. Identifier of the message to edit",
                        null=True,
                    ),
                ),
                (
                    "inline_message_id",
                    models.CharField(
                        blank=True,
                        help_text="Required if chat_id and message_id are not specified. Identifier of the inline message",
                        null=True,
                    ),
                ),
                ("object_id", models.PositiveIntegerField(blank=True, null=True)),
                (
                    "content_type",
                    models.ForeignKey(
                        blank=True,
                        help_text="A JSON-serialized object for an inline keyboard.",
                        limit_choices_to=models.Q(("model", "inlinekeyboardmarkup")),
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="contenttypes.contenttype",
                    ),
                ),
            ],
            bases=("component.component",),
        ),
        migrations.CreateModel(
            name="EditMessageText",
            fields=[
                (
                    "component_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="component.component",
                    ),
                ),
                (
                    "business_connection_id",
                    models.CharField(
                        blank=True,
                        help_text="Unique identifier of the business connection on behalf of which the message to be edited was sent",
                        null=True,
                    ),
                ),
                (
                    "chat_id",
                    models.CharField(
                        blank=True,
                        help_text="Required if inline_message_id is not specified. Unique identifier for the target chat or username of the target channel (in the format @channelusername)",
                        null=True,
                    ),
                ),
                (
                    "message_id",
                    models.IntegerField(
                        blank=True,
                        help_text="Required if inline_message_id is not specified. Identifier of the message to edit",
                        null=True,
                    ),
                ),
                (
                    "inline_message_id",
                    models.CharField(
                        blank=True,
                        help_text="Required if chat_id and message_id are not specified. Identifier of the inline message",
                        null=True,
                    ),
                ),
                (
                    "text",
                    models.CharField(
                        blank=True,
                        help_text="New text of the message, 1-4096 characters after entities parsing",
                        max_length=4096,
                        null=True,
                    ),
                ),
                (
                    "parse_mode",
                    models.CharField(
                        blank=True,
                        help_text="Mode for parsing entities in the message text. See formatting options for more details.",
                        null=True,
                    ),
                ),
                ("object_id", models.PositiveIntegerField(blank=True, null=True)),
                (
                    "content_type",
                    models.ForeignKey(
                        blank=True,
                        help_text="A JSON-serialized object for an inline keyboard.",
                        limit_choices_to=models.Q(("model", "inlinekeyboardmarkup")),
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="contenttypes.contenttype",
                    ),
                ),
            ],
            bases=("component.component",),
        ),
        migrations.CreateModel(
            name="SendAnimation",
            fields=[
                (
                    "component_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="component.component",
                    ),
                ),
                (
                    "business_connection_id",
                    models.CharField(
                        blank=True,
                        help_text="Unique identifier of the business connection on behalf of which the message will be sent",
                        null=True,
                    ),
                ),
                (
                    "chat_id",
                    models.CharField(
                        blank=True,
                        help_text="Unique identifier for the target chat or username of the target channel (in the format @channelusername)",
                        null=True,
                    ),
                ),
                (
                    "message_thread_id",
                    models.IntegerField(
                        blank=True,
                        help_text="Unique identifier for the target message thread (topic) of the forum; for forum supergroups only",
                        null=True,
                    ),
                ),
                (
                    "animation",
                    models.FileField(
                        blank=True,
                        help_text="Animation to send. Pass a file_id as String to send an animation that exists on the Telegram servers (recommended), pass an HTTP URL as a String for Telegram to get an animation from the Internet, or upload a new animation using multipart/form-data. More information on Sending Files »",
                        null=True,
                        upload_to="animation/",
                    ),
                ),
                (
                    "duration",
                    models.IntegerField(
                        blank=True,
                        help_text="Duration of sent animation in seconds",
                        null=True,
                    ),
                ),
                (
                    "width",
                    models.IntegerField(
                        blank=True,
                        help_text="Animation width",
                        null=True,
                    ),
                ),
                (
                    "height",
                    models.IntegerField(
                        blank=True,
                        help_text="Animation height",
                        null=True,
                    ),
                ),
                (
                    "thumbnail",
                    models.FileField(
                        blank=True,
                        help_text="Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail's width and height should not exceed 320. Ignored if the file is not uploaded using multipart/form-data. Thumbnails can't be reused and can be only uploaded as a new file, so you can pass “attach://<file_attach_name>” if the thumbnail was uploaded using multipart/form-data under <file_attach_name>. More information on Sending Files »",
                        null=True,
                        upload_to="thumbnail/",
                    ),
                ),
                (
                    "caption",
                    models.CharField(
                        blank=True,
                        help_text="Animation caption (may also be used when resending animation by file_id), 0-1024 characters after entities parsing",
                        max_length=1024,
                        null=True,
                    ),
                ),
                (
                    "parse_mode",
                    models.CharField(
                        blank=True,
                        help_text="Mode for parsing entities in the animation caption. See formatting options for more details.",
                        null=True,
                    ),
                ),
                (
                    "show_caption_above_media",
                    models.BooleanField(
                        blank=True,
                        help_text="Pass True, if the caption must be shown above the message media",
                        null=True,
                    ),
                ),
                (
                    "has_spoiler",
                    models.BooleanField(
                        blank=True,
                        help_text="Pass True if the animation needs to be covered with a spoiler animation",
                        null=True,
                    ),
                ),
                (
                    "disable_notification",
                    models.BooleanField(
                        blank=True,
                        help_text="Sends the message silently. Users will receive a notification with no sound.",
                        null=True,
                    ),
                ),
                (
                    "protect_content",
                    models.BooleanField(
                        blank=True,
                        help_text="Protects the contents of the sent message from forwarding and saving",
                        null=True,
                    ),
                ),
                (
                    "allow_paid_broadcast",
                    models.BooleanField(
                        blank=True,
                        help_text="Pass True to allow up to 1000 messages per second, ignoring broadcasting limits for a fee of 0.1 Telegram Stars per message. The relevant Stars will be withdrawn from the bot's balance",
                        null=True,
                    ),
                ),
                (
                    "message_effect_id",
                    models.CharField(
                        blank=True,
                        help_text="Unique identifier of the message effect to be added to the message; for private chats only",
                        null=True,
                    ),
                ),
                ("object_id", models.PositiveIntegerField(blank=True, null=True)),
                (
                    "content_type",
                    models.ForeignKey(
                        blank=True,
                        help_text="Additional interface options. A JSON-serialized object for an inline keyboard, custom reply keyboard, instructions to remove a reply keyboard or to force a reply from the user",
                        limit_choices_to=models.Q(
                            ("model", "inlinekeyboardmarkup"),
                            ("model", "replykeyboardmarkup"),
                            ("model", "replykeyboardremove"),
                            ("model", "forcereply"),
                            _connector="OR",
                        ),
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="contenttypes.contenttype",
                    ),
                ),
            ],
            bases=("component.component",),
        ),
        migrations.CreateModel(
            name="SendContact",
            fields=[
                (
                    "component_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="component.component",
                    ),
                ),
                (
                    "business_connection_id",
                    models.CharField(
                        blank=True,
                        help_text="Unique identifier of the business connection on behalf of which the message will be sent",
                        null=True,
                    ),
                ),
                (
                    "chat_id",
                    models.CharField(
                        blank=True,
                        help_text="Unique identifier for the target chat or username of the target channel (in the format @channelusername)",
                        null=True,
                    ),
                ),
                (
                    "message_thread_id",
                    models.IntegerField(
                        blank=True,
                        help_text="Unique identifier for the target message thread (topic) of the forum; for forum supergroups only",
                        null=True,
                    ),
                ),
                (
                    "phone_number",
                    models.CharField(
                        blank=True,
                        help_text="Contact's phone number",
                        null=True,
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True,
                        help_text="Contact's first name",
                        null=True,
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True,
                        help_text="Contact's last name",
                        null=True,
                    ),
                ),
                (
                    "vcard",
                    models.CharField(
                        blank=True,
                        help_text="Additional data about the contact in the form of a vCard, 0-2048 bytes",
                        null=True,
                    ),
                ),
                (
                    "disable_notification",
                    models.BooleanField(
                        blank=True,
                        help_text="Sends the message silently. Users will receive a notification with no sound.",
                        null=True,
                    ),
                ),
                (
                    "protect_content",
                    models.BooleanField(
                        blank=True,
                        help_text="Protects the contents of the sent message from forwarding and saving",
                        null=True,
                    ),
                ),
                (
                    "allow_paid_broadcast",
                    models.BooleanField(
                        blank=True,
                        help_text="Pass True to allow up to 1000 messages per second, ignoring broadcasting limits for a fee of 0.1 Telegram Stars per message. The relevant Stars will be withdrawn from the bot's balance",
                        null=True,
                    ),
                ),
                (
                    "message_effect_id",
                    models.CharField(
                        blank=True,
                        help_text="Unique identifier of the message effect to be added to the message; for private chats only",
                        null=True,
                    ),
                ),
                ("object_id", models.PositiveIntegerField(blank=True, null=True)),
                (
                    "content_type",
                    models.ForeignKey(
                        blank=True,
                        help_text="Additional interface options. A JSON-serialized object for an inline keyboard, custom reply keyboard, instructions to remove a reply keyboard or to force a reply from the user",
                        limit_choices_to=models.Q(
                            ("model", "inlinekeyboardmarkup"),
                            ("model", "replykeyboardmarkup"),
                            ("model", "replykeyboardremove"),
                            ("model", "forcereply"),
                            _connector="OR",
                        ),
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="contenttypes.contenttype",
                    ),
                ),
            ],
            bases=("component.component",),
        ),
        migrations.CreateModel(
            name="SendDice",
            fields=[
                (
                    "component_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="component.component",
                    ),
                ),
                (
                    "business_connection_id",
                    models.CharField(
                        blank=True,
                        help_text="Unique identifier of the business connection on behalf of which the message will be sent",
                        null=True,
                    ),
                ),
                (
                    "chat_id",
                    models.CharField(
                        blank=True,
                        help_text="Unique identifier for the target chat or username of the target channel (in the format @channelusername)",
                        null=True,
                    ),
                ),
                (
                    "message_thread_id",
                    models.IntegerField(
                        blank=True,
                        help_text="Unique identifier for the target message thread (topic) of the forum; for forum supergroups only",
                        null=True,
                    ),
                ),
                (
                    "emoji",
                    models.CharField(
                        blank=True,
                        help_text="Emoji on which the dice throw animation is based. Currently, must be one of “”, “”, “”, “”, “”, or “”. Dice can have values 1-6 for “”, “” and “”, values 1-5 for “” and “”, and values 1-64 for “”. Defaults to “”",
                        null=True,
                    ),
                ),
                (
                    "disable_notification",
                    models.BooleanField(
                        blank=True,
                        help_text="Sends the message silently. Users will receive a notification with no sound.",
                        null=True,
                    ),
                ),
                (
                    "protect_content",
                    models.BooleanField(
                        blank=True,
                        help_text="Protects the contents of the sent message from forwarding",
                        null=True,
                    ),
                ),
                (
                    "allow_paid_broadcast",
                    models.BooleanField(
                        blank=True,
                        help_text="Pass True to allow up to 1000 messages per second, ignoring broadcasting limits for a fee of 0.1 Telegram Stars per message. The relevant Stars will be withdrawn from the bot's balance",
                        null=True,
                    ),
                ),
                (
                    "message_effect_id",
                    models.CharField(
                        blank=True,
                        help_text="Unique identifier of the message effect to be added to the message; for private chats only",
                        null=True,
                    ),
                ),
                ("object_id", models.PositiveIntegerField(blank=True, null=True)),
                (
                    "content_type",
                    models.ForeignKey(
                        blank=True,
                        help_text="Additional interface options. A JSON-serialized object for an inline keyboard, custom reply keyboard, instructions to remove a reply keyboard or to force a reply from the user",
                        limit_choices_to=models.Q(
                            ("model", "inlinekeyboardmarkup"),
                            ("model", "replykeyboardmarkup"),
                            ("model", "replykeyboardremove"),
                            ("model", "forcereply"),
                            _connector="OR",
                        ),
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="contenttypes.contenttype",
                    ),
                ),
            ],
            bases=("component.component",),
        ),
        migrations.CreateModel(
            name="SendDocument",
            fields=[
                (
                    "component_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="component.component",
                    ),
                ),
                (
                    "business_connection_id",
                    models.CharField(
                        blank=True,
                        help_text="Unique identifier of the business connection on behalf of which the message will be sent",
                        null=True,
                    ),
                ),
                (
                    "chat_id",
                    models.CharField(
                        blank=True,
                        help_text="Unique identifier for the target chat or username of the target channel (in the format @channelusername)",
                        null=True,
                    ),
                ),
                (
                    "message_thread_id",
                    models.IntegerField(
                        blank=True,
                        help_text="Unique identifier for the target message thread (topic) of the forum; for forum supergroups only",
                        null=True,
                    ),
                ),
                (
                    "document",
                    models.FileField(
                        blank=True,
                        help_text="File to send. Pass a file_id as String to send a file that exists on the Telegram servers (recommended), pass an HTTP URL as a String for Telegram to get a file from the Internet, or upload a new one using multipart/form-data. More information on Sending Files »",
                        null=True,
                        upload_to="document/",
                    ),
                ),
                (
                    "thumbnail",
                    models.FileField(
                        blank=True,
                        help_text="Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail's width and height should not exceed 320. Ignored if the file is not uploaded using multipart/form-data. Thumbnails can't be reused and can be only uploaded as a new file, so you can pass “attach://<file_attach_name>” if the thumbnail was uploaded using multipart/form-data under <file_attach_name>. More information on Sending Files »",
                        null=True,
                        upload_to="thumbnail/",
                    ),
                ),
                (
                    "caption",
                    models.CharField(
                        blank=True,
                        help_text="Document caption (may also be used when resending documents by file_id), 0-1024 characters after entities parsing",
                        max_length=1024,
                        null=True,
                    ),
                ),
                (
                    "parse_mode",
                    models.CharField(
                        blank=True,
                        help_text="Mode for parsing entities in the document caption. See formatting options for more details.",
                        null=True,
                    ),
                ),
                (
                    "disable_content_type_detection",
                    models.BooleanField(
                        blank=True,
                        help_text="Disables automatic server-side content type detection for files uploaded using multipart/form-data",
                        null=True,
                    ),
                ),
                (
                    "disable_notification",
                    models.BooleanField(
                        blank=True,
                        help_text="Sends the message silently. Users will receive a notification with no sound.",
                        null=True,
                    ),
                ),
                (
                    "protect_content",
                    models.BooleanField(
                        blank=True,
                        help_text="Protects the contents of the sent message from forwarding and saving",
                        null=True,
                    ),
                ),
                (
                    "allow_paid_broadcast",
                    models.BooleanField(
                        blank=True,
                        help_text="Pass True to allow up to 1000 messages per second, ignoring broadcasting limits for a fee of 0.1 Telegram Stars per message. The relevant Stars will be withdrawn from the bot's balance",
                        null=True,
                    ),
                ),
                (
                    "message_effect_id",
                    models.CharField(
                        blank=True,
                        help_text="Unique identifier of the message effect to be added to the message; for private chats only",
                        null=True,
                    ),
                ),
                ("object_id", models.PositiveIntegerField(blank=True, null=True)),
                (
                    "content_type",
                    models.ForeignKey(
                        blank=True,
                        help_text="Additional interface options. A JSON-serialized object for an inline keyboard, custom reply keyboard, instructions to remove a reply keyboard or to force a reply from the user",
                        limit_choices_to=models.Q(
                            ("model", "inlinekeyboardmarkup"),
                            ("model", "replykeyboardmarkup"),
                            ("model", "replykeyboardremove"),
                            ("model", "forcereply"),
                            _connector="OR",
                        ),
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="contenttypes.contenttype",
                    ),
                ),
            ],
            bases=("component.component",),
        ),
        migrations.CreateModel(
            name="SendGame",
            fields=[
                (
                    "component_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="component.component",
                    ),
                ),
                (
                    "business_connection_id",
                    models.CharField(
                        blank=True,
                        help_text="Unique identifier of the business connection on behalf of which the message will be sent",
                        null=True,
                    ),
                ),
                (
                    "chat_id",
                    models.IntegerField(
                        blank=True,
                        help_text="Unique identifier for the target chat",
                        null=True,
                    ),
                ),
                (
                    "message_thread_id",
                    models.IntegerField(
                        blank=True,
                        help_text="Unique identifier for the target message thread (topic) of the forum; for forum supergroups only",
                        null=True,
                    ),
                ),
                (
                    "game_short_name",
                    models.CharField(
                        blank=True,
                        help_text="Short name of the game, serves as the unique identifier for the game. Set up your games via @BotFather.",
                        null=True,
                    ),
                ),
                (
                    "disable_notification",
                    models.BooleanField(
                        blank=True,
                        help_text="Sends the message silently. Users will receive a notification with no sound.",
                        null=True,
                    ),
                ),
                (
                    "protect_content",
                    models.BooleanField(
                        blank=True,
                        help_text="Protects the contents of the sent message from forwarding and saving",
                        null=True,
                    ),
                ),
                (
                    "allow_paid_broadcast",
                    models.BooleanField(
                        blank=True,
                        help_text="Pass True to allow up to 1000 messages per second, ignoring broadcasting limits for a fee of 0.1 Telegram Stars per message. The relevant Stars will be withdrawn from the bot's balance",
                        null=True,
                    ),
                ),
                (
                    "message_effect_id",
                    models.CharField(
                        blank=True,
                        help_text="Unique identifier of the message effect to be added to the message; for private chats only",
                        null=True,
                    ),
                ),
                ("object_id", models.PositiveIntegerField(blank=True, null=True)),
                (
                    "content_type",
                    models.ForeignKey(
                        blank=True,
                        help_text="A JSON-serialized object for an inline keyboard. If empty, one 'Play game_title' button will be shown. If not empty, the first button must launch the game.",
                        limit_choices_to=models.Q(("model", "inlinekeyboardmarkup")),
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="contenttypes.contenttype",
                    ),
                ),
            ],
            bases=("component.component",),
        ),
        migrations.CreateModel(
            name="SendInvoice",
            fields=[
                (
                    "component_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="component.component",
                    ),
                ),
                (
                    "chat_id",
                    models.CharField(
                        blank=True,
                        help_text="Unique identifier for the target chat or username of the target channel (in the format @channelusername)",
                        null=True,
                    ),
                ),
                (
                    "message_thread_id",
                    models.IntegerField(
                        blank=True,
                        help_text="Unique identifier for the target message thread (topic) of the forum; for forum supergroups only",
                        null=True,
                    ),
                ),
                (
                    "title",
                    models.CharField(
                        blank=True,
                        help_text="Product name, 1-32 characters",
                        max_length=32,
                        null=True,
                    ),
                ),
                (
                    "description",
                    models.CharField(
                        blank=True,
                        help_text="Product description, 1-255 characters",
                        max_length=255,
                        null=True,
                    ),
                ),
                (
                    "payload",
                    models.CharField(
                        blank=True,
                        help_text="Bot-defined invoice payload, 1-128 bytes. This will not be displayed to the user, use it for your internal processes.",
                        null=True,
                    ),
                ),
                (
                    "provider_token",
                    models.CharField(
                        blank=True,
                        help_text="Payment provider token, obtained via @BotFather. Pass an empty string for payments in Telegram Stars.",
                        null=True,
                    ),
                ),
                (
                    "currency",
                    models.CharField(
                        blank=True,
                        help_text="Three-letter ISO 4217 currency code, see more on currencies. Pass “XTR” for payments in Telegram Stars.",
                        null=True,
                    ),
                ),
                (
                    "max_tip_amount",
                    models.IntegerField(
                        blank=True,
                        help_text="The maximum accepted amount for tips in the smallest units of the currency (integer, not float/double). For example, for a maximum tip of US$ 1.45 pass max_tip_amount = 145. See the exp parameter in currencies.json, it shows the number of digits past the decimal point for each currency (2 for the majority of currencies). Defaults to 0. Not supported for payments in Telegram Stars.",
                        null=True,
                    ),
                ),
                (
                    "suggested_tip_amounts",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.IntegerField(),
                        blank=True,
                        default=list,
                        help_text="A JSON-serialized array of suggested amounts of tips in the smallest units of the currency (integer, not float/double). At most 4 suggested tip amounts can be specified. The suggested tip amounts must be positive, passed in a strictly increased order and must not exceed max_tip_amount.",
                        null=True,
                        size=None,
                    ),
                ),
                (
                    "start_parameter",
                    models.CharField(
                        blank=True,
                        help_text="Unique deep-linking parameter. If left empty, forwarded copies of the sent message will have a Pay button, allowing multiple users to pay directly from the forwarded message, using the same invoice. If non-empty, forwarded copies of the sent message will have a URL button with a deep link to the bot (instead of a Pay button), with the value used as the start parameter",
                        null=True,
                    ),
                ),
                (
                    "provider_data",
                    models.CharField(
                        blank=True,
                        help_text="JSON-serialized data about the invoice, which will be shared with the payment provider. A detailed description of required fields should be provided by the payment provider.",
                        null=True,
                    ),
                ),
                (
                    "photo_url",
                    models.CharField(
                        blank=True,
                        help_text="URL of the product photo for the invoice. Can be a photo of the goods or a marketing image for a service. People like it better when they see what they are paying for.",
                        null=True,
                    ),
                ),
                (
                    "photo_size",
                    models.IntegerField(
                        blank=True,
                        help_text="Photo size in bytes",
                        null=True,
                    ),
                ),
                (
                    "photo_width",
                    models.IntegerField(blank=True, help_text="Photo width", null=True),
                ),
                (
                    "photo_height",
                    models.IntegerField(
                        blank=True,
                        help_text="Photo height",
                        null=True,
                    ),
                ),
                (
                    "need_name",
                    models.BooleanField(
                        blank=True,
                        help_text="Pass True if you require the user's full name to complete the order. Ignored for payments in Telegram Stars.",
                        null=True,
                    ),
                ),
                (
                    "need_phone_number",
                    models.BooleanField(
                        blank=True,
                        help_text="Pass True if you require the user's phone number to complete the order. Ignored for payments in Telegram Stars.",
                        null=True,
                    ),
                ),
                (
                    "need_email",
                    models.BooleanField(
                        blank=True,
                        help_text="Pass True if you require the user's email address to complete the order. Ignored for payments in Telegram Stars.",
                        null=True,
                    ),
                ),
                (
                    "need_shipping_address",
                    models.BooleanField(
                        blank=True,
                        help_text="Pass True if you require the user's shipping address to complete the order. Ignored for payments in Telegram Stars.",
                        null=True,
                    ),
                ),
                (
                    "send_phone_number_to_provider",
                    models.BooleanField(
                        blank=True,
                        help_text="Pass True if the user's phone number should be sent to the provider. Ignored for payments in Telegram Stars.",
                        null=True,
                    ),
                ),
                (
                    "send_email_to_provider",
                    models.BooleanField(
                        blank=True,
                        help_text="Pass True if the user's email address should be sent to the provider. Ignored for payments in Telegram Stars.",
                        null=True,
                    ),
                ),
                (
                    "is_flexible",
                    models.BooleanField(
                        blank=True,
                        help_text="Pass True if the final price depends on the shipping method. Ignored for payments in Telegram Stars.",
                        null=True,
                    ),
                ),
                (
                    "disable_notification",
                    models.BooleanField(
                        blank=True,
                        help_text="Sends the message silently. Users will receive a notification with no sound.",
                        null=True,
                    ),
                ),
                (
                    "protect_content",
                    models.BooleanField(
                        blank=True,
                        help_text="Protects the contents of the sent message from forwarding and saving",
                        null=True,
                    ),
                ),
                (
                    "allow_paid_broadcast",
                    models.BooleanField(
                        blank=True,
                        help_text="Pass True to allow up to 1000 messages per second, ignoring broadcasting limits for a fee of 0.1 Telegram Stars per message. The relevant Stars will be withdrawn from the bot's balance",
                        null=True,
                    ),
                ),
                (
                    "message_effect_id",
                    models.CharField(
                        blank=True,
                        help_text="Unique identifier of the message effect to be added to the message; for private chats only",
                        null=True,
                    ),
                ),
                ("object_id", models.PositiveIntegerField(blank=True, null=True)),
                (
                    "content_type",
                    models.ForeignKey(
                        blank=True,
                        help_text="A JSON-serialized object for an inline keyboard. If empty, one 'Pay total price' button will be shown. If not empty, the first button must be a Pay button.",
                        limit_choices_to=models.Q(("model", "inlinekeyboardmarkup")),
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="contenttypes.contenttype",
                    ),
                ),
            ],
            bases=("component.component",),
        ),
        migrations.CreateModel(
            name="SendLocation",
            fields=[
                (
                    "component_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="component.component",
                    ),
                ),
                (
                    "business_connection_id",
                    models.CharField(
                        blank=True,
                        help_text="Unique identifier of the business connection on behalf of which the message will be sent",
                        null=True,
                    ),
                ),
                (
                    "chat_id",
                    models.CharField(
                        blank=True,
                        help_text="Unique identifier for the target chat or username of the target channel (in the format @channelusername)",
                        null=True,
                    ),
                ),
                (
                    "message_thread_id",
                    models.IntegerField(
                        blank=True,
                        help_text="Unique identifier for the target message thread (topic) of the forum; for forum supergroups only",
                        null=True,
                    ),
                ),
                (
                    "latitude",
                    models.FloatField(
                        blank=True,
                        help_text="Latitude of the location",
                        null=True,
                    ),
                ),
                (
                    "longitude",
                    models.FloatField(
                        blank=True,
                        help_text="Longitude of the location",
                        null=True,
                    ),
                ),
                (
                    "horizontal_accuracy",
                    models.FloatField(
                        blank=True,
                        help_text="The radius of uncertainty for the location, measured in meters; 0-1500",
                        null=True,
                    ),
                ),
                (
                    "live_period",
                    models.IntegerField(
                        blank=True,
                        help_text="Period in seconds during which the location will be updated (see Live Locations, should be between 60 and 86400, or 0x7FFFFFFF for live locations that can be edited indefinitely.",
                        null=True,
                    ),
                ),
                (
                    "heading",
                    models.IntegerField(
                        blank=True,
                        help_text="For live locations, a direction in which the user is moving, in degrees. Must be between 1 and 360 if specified.",
                        null=True,
                    ),
                ),
                (
                    "proximity_alert_radius",
                    models.IntegerField(
                        blank=True,
                        help_text="For live locations, a maximum distance for proximity alerts about approaching another chat member, in meters. Must be between 1 and 100000 if specified.",
                        null=True,
                    ),
                ),
                (
                    "disable_notification",
                    models.BooleanField(
                        blank=True,
                        help_text="Sends the message silently. Users will receive a notification with no sound.",
                        null=True,
                    ),
                ),
                (
                    "protect_content",
                    models.BooleanField(
                        blank=True,
                        help_text="Protects the contents of the sent message from forwarding and saving",
                        null=True,
                    ),
                ),
                (
                    "allow_paid_broadcast",
                    models.BooleanField(
                        blank=True,
                        help_text="Pass True to allow up to 1000 messages per second, ignoring broadcasting limits for a fee of 0.1 Telegram Stars per message. The relevant Stars will be withdrawn from the bot's balance",
                        null=True,
                    ),
                ),
                (
                    "message_effect_id",
                    models.CharField(
                        blank=True,
                        help_text="Unique identifier of the message effect to be added to the message; for private chats only",
                        null=True,
                    ),
                ),
                ("object_id", models.PositiveIntegerField(blank=True, null=True)),
                (
                    "content_type",
                    models.ForeignKey(
                        blank=True,
                        help_text="Additional interface options. A JSON-serialized object for an inline keyboard, custom reply keyboard, instructions to remove a reply keyboard or to force a reply from the user",
                        limit_choices_to=models.Q(
                            ("model", "inlinekeyboardmarkup"),
                            ("model", "replykeyboardmarkup"),
                            ("model", "replykeyboardremove"),
                            ("model", "forcereply"),
                            _connector="OR",
                        ),
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="contenttypes.contenttype",
                    ),
                ),
            ],
            bases=("component.component",),
        ),
        migrations.CreateModel(
            name="SendMessage",
            fields=[
                (
                    "component_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="component.component",
                    ),
                ),
                (
                    "business_connection_id",
                    models.CharField(
                        blank=True,
                        help_text="Unique identifier of the business connection on behalf of which the message will be sent",
                        null=True,
                    ),
                ),
                (
                    "chat_id",
                    models.CharField(
                        blank=True,
                        help_text="Unique identifier for the target chat or username of the target channel (in the format @channelusername)",
                        null=True,
                    ),
                ),
                (
                    "message_thread_id",
                    models.IntegerField(
                        blank=True,
                        help_text="Unique identifier for the target message thread (topic) of the forum; for forum supergroups only",
                        null=True,
                    ),
                ),
                (
                    "text",
                    models.CharField(
                        blank=True,
                        help_text="Text of the message to be sent, 1-4096 characters after entities parsing",
                        max_length=4096,
                        null=True,
                    ),
                ),
                (
                    "parse_mode",
                    models.CharField(
                        blank=True,
                        help_text="Mode for parsing entities in the message text. See formatting options for more details.",
                        null=True,
                    ),
                ),
                (
                    "disable_notification",
                    models.BooleanField(
                        blank=True,
                        help_text="Sends the message silently. Users will receive a notification with no sound.",
                        null=True,
                    ),
                ),
                (
                    "protect_content",
                    models.BooleanField(
                        blank=True,
                        help_text="Protects the contents of the sent message from forwarding and saving",
                        null=True,
                    ),
                ),
                (
                    "allow_paid_broadcast",
                    models.BooleanField(
                        blank=True,
                        help_text="Pass True to allow up to 1000 messages per second, ignoring broadcasting limits for a fee of 0.1 Telegram Stars per message. The relevant Stars will be withdrawn from the bot's balance",
                        null=True,
                    ),
                ),
                (
                    "message_effect_id",
                    models.CharField(
                        blank=True,
                        help_text="Unique identifier of the message effect to be added to the message; for private chats only",
                        null=True,
                    ),
                ),
                ("object_id", models.PositiveIntegerField(blank=True, null=True)),
                (
                    "content_type",
                    models.ForeignKey(
                        blank=True,
                        help_text="Additional interface options. A JSON-serialized object for an inline keyboard, custom reply keyboard, instructions to remove a reply keyboard or to force a reply from the user",
                        limit_choices_to=models.Q(
                            ("model", "inlinekeyboardmarkup"),
                            ("model", "replykeyboardmarkup"),
                            ("model", "replykeyboardremove"),
                            ("model", "forcereply"),
                            _connector="OR",
                        ),
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="contenttypes.contenttype",
                    ),
                ),
            ],
            bases=("component.component",),
        ),
        migrations.CreateModel(
            name="SendPaidMedia",
            fields=[
                (
                    "component_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="component.component",
                    ),
                ),
                (
                    "business_connection_id",
                    models.CharField(
                        blank=True,
                        help_text="Unique identifier of the business connection on behalf of which the message will be sent",
                        null=True,
                    ),
                ),
                (
                    "chat_id",
                    models.CharField(
                        blank=True,
                        help_text="Unique identifier for the target chat or username of the target channel (in the format @channelusername). If the chat is a channel, all Telegram Star proceeds from this media will be credited to the chat's balance. Otherwise, they will be credited to the bot's balance.",
                        null=True,
                    ),
                ),
                (
                    "star_count",
                    models.IntegerField(
                        blank=True,
                        help_text="The number of Telegram Stars that must be paid to buy access to the media; 1-10000",
                        null=True,
                    ),
                ),
                (
                    "payload",
                    models.CharField(
                        blank=True,
                        help_text="Bot-defined paid media payload, 0-128 bytes. This will not be displayed to the user, use it for your internal processes.",
                        null=True,
                    ),
                ),
                (
                    "caption",
                    models.CharField(
                        blank=True,
                        help_text="Media caption, 0-1024 characters after entities parsing",
                        max_length=1024,
                        null=True,
                    ),
                ),
                (
                    "parse_mode",
                    models.CharField(
                        blank=True,
                        help_text="Mode for parsing entities in the media caption. See formatting options for more details.",
                        null=True,
                    ),
                ),
                (
                    "show_caption_above_media",
                    models.BooleanField(
                        blank=True,
                        help_text="Pass True, if the caption must be shown above the message media",
                        null=True,
                    ),
                ),
                (
                    "disable_notification",
                    models.BooleanField(
                        blank=True,
                        help_text="Sends the message silently. Users will receive a notification with no sound.",
                        null=True,
                    ),
                ),
                (
                    "protect_content",
                    models.BooleanField(
                        blank=True,
                        help_text="Protects the contents of the sent message from forwarding and saving",
                        null=True,
                    ),
                ),
                (
                    "allow_paid_broadcast",
                    models.BooleanField(
                        blank=True,
                        help_text="Pass True to allow up to 1000 messages per second, ignoring broadcasting limits for a fee of 0.1 Telegram Stars per message. The relevant Stars will be withdrawn from the bot's balance",
                        null=True,
                    ),
                ),
                ("object_id", models.PositiveIntegerField(blank=True, null=True)),
                (
                    "content_type",
                    models.ForeignKey(
                        blank=True,
                        help_text="Additional interface options. A JSON-serialized object for an inline keyboard, custom reply keyboard, instructions to remove a reply keyboard or to force a reply from the user",
                        limit_choices_to=models.Q(
                            ("model", "inlinekeyboardmarkup"),
                            ("model", "replykeyboardmarkup"),
                            ("model", "replykeyboardremove"),
                            ("model", "forcereply"),
                            _connector="OR",
                        ),
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="contenttypes.contenttype",
                    ),
                ),
            ],
            bases=("component.component",),
        ),
        migrations.CreateModel(
            name="SendPhoto",
            fields=[
                (
                    "component_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="component.component",
                    ),
                ),
                (
                    "business_connection_id",
                    models.CharField(
                        blank=True,
                        help_text="Unique identifier of the business connection on behalf of which the message will be sent",
                        null=True,
                    ),
                ),
                (
                    "chat_id",
                    models.CharField(
                        blank=True,
                        help_text="Unique identifier for the target chat or username of the target channel (in the format @channelusername)",
                        null=True,
                    ),
                ),
                (
                    "message_thread_id",
                    models.IntegerField(
                        blank=True,
                        help_text="Unique identifier for the target message thread (topic) of the forum; for forum supergroups only",
                        null=True,
                    ),
                ),
                (
                    "photo",
                    models.FileField(
                        blank=True,
                        help_text="Photo to send. Pass a file_id as String to send a photo that exists on the Telegram servers (recommended), pass an HTTP URL as a String for Telegram to get a photo from the Internet, or upload a new photo using multipart/form-data. The photo must be at most 10 MB in size. The photo's width and height must not exceed 10000 in total. Width and height ratio must be at most 20. More information on Sending Files »",
                        null=True,
                        upload_to="photo/",
                    ),
                ),
                (
                    "caption",
                    models.CharField(
                        blank=True,
                        help_text="Photo caption (may also be used when resending photos by file_id), 0-1024 characters after entities parsing",
                        max_length=1024,
                        null=True,
                    ),
                ),
                (
                    "parse_mode",
                    models.CharField(
                        blank=True,
                        help_text="Mode for parsing entities in the photo caption. See formatting options for more details.",
                        null=True,
                    ),
                ),
                (
                    "show_caption_above_media",
                    models.BooleanField(
                        blank=True,
                        help_text="Pass True, if the caption must be shown above the message media",
                        null=True,
                    ),
                ),
                (
                    "has_spoiler",
                    models.BooleanField(
                        blank=True,
                        help_text="Pass True if the photo needs to be covered with a spoiler animation",
                        null=True,
                    ),
                ),
                (
                    "disable_notification",
                    models.BooleanField(
                        blank=True,
                        help_text="Sends the message silently. Users will receive a notification with no sound.",
                        null=True,
                    ),
                ),
                (
                    "protect_content",
                    models.BooleanField(
                        blank=True,
                        help_text="Protects the contents of the sent message from forwarding and saving",
                        null=True,
                    ),
                ),
                (
                    "allow_paid_broadcast",
                    models.BooleanField(
                        blank=True,
                        help_text="Pass True to allow up to 1000 messages per second, ignoring broadcasting limits for a fee of 0.1 Telegram Stars per message. The relevant Stars will be withdrawn from the bot's balance",
                        null=True,
                    ),
                ),
                (
                    "message_effect_id",
                    models.CharField(
                        blank=True,
                        help_text="Unique identifier of the message effect to be added to the message; for private chats only",
                        null=True,
                    ),
                ),
                ("object_id", models.PositiveIntegerField(blank=True, null=True)),
                (
                    "content_type",
                    models.ForeignKey(
                        blank=True,
                        help_text="Additional interface options. A JSON-serialized object for an inline keyboard, custom reply keyboard, instructions to remove a reply keyboard or to force a reply from the user",
                        limit_choices_to=models.Q(
                            ("model", "inlinekeyboardmarkup"),
                            ("model", "replykeyboardmarkup"),
                            ("model", "replykeyboardremove"),
                            ("model", "forcereply"),
                            _connector="OR",
                        ),
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="contenttypes.contenttype",
                    ),
                ),
            ],
            bases=("component.component",),
        ),
        migrations.CreateModel(
            name="SendPoll",
            fields=[
                (
                    "component_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="component.component",
                    ),
                ),
                (
                    "business_connection_id",
                    models.CharField(
                        blank=True,
                        help_text="Unique identifier of the business connection on behalf of which the message will be sent",
                        null=True,
                    ),
                ),
                (
                    "chat_id",
                    models.CharField(
                        blank=True,
                        help_text="Unique identifier for the target chat or username of the target channel (in the format @channelusername)",
                        null=True,
                    ),
                ),
                (
                    "message_thread_id",
                    models.IntegerField(
                        blank=True,
                        help_text="Unique identifier for the target message thread (topic) of the forum; for forum supergroups only",
                        null=True,
                    ),
                ),
                (
                    "question",
                    models.CharField(
                        blank=True,
                        help_text="Poll question, 1-300 characters",
                        max_length=300,
                        null=True,
                    ),
                ),
                (
                    "question_parse_mode",
                    models.CharField(
                        blank=True,
                        help_text="Mode for parsing entities in the question. See formatting options for more details. Currently, only custom emoji entities are allowed",
                        null=True,
                    ),
                ),
                (
                    "is_anonymous",
                    models.BooleanField(
                        blank=True,
                        help_text="True, if the poll needs to be anonymous, defaults to True",
                        null=True,
                    ),
                ),
                (
                    "type",
                    models.CharField(
                        blank=True,
                        help_text="Poll type, “quiz” or “regular”, defaults to “regular”",
                        null=True,
                    ),
                ),
                (
                    "allows_multiple_answers",
                    models.BooleanField(
                        blank=True,
                        help_text="True, if the poll allows multiple answers, ignored for polls in quiz mode, defaults to False",
                        null=True,
                    ),
                ),
                (
                    "correct_option_id",
                    models.IntegerField(
                        blank=True,
                        help_text="0-based identifier of the correct answer option, required for polls in quiz mode",
                        null=True,
                    ),
                ),
                (
                    "explanation",
                    models.CharField(
                        blank=True,
                        help_text="Text that is shown when a user chooses an incorrect answer or taps on the lamp icon in a quiz-style poll, 0-200 characters with at most 2 line feeds after entities parsing",
                        max_length=200,
                        null=True,
                    ),
                ),
                (
                    "explanation_parse_mode",
                    models.CharField(
                        blank=True,
                        help_text="Mode for parsing entities in the explanation. See formatting options for more details.",
                        null=True,
                    ),
                ),
                (
                    "open_period",
                    models.IntegerField(
                        blank=True,
                        help_text="Amount of time in seconds the poll will be active after creation, 5-600. Can't be used together with close_date.",
                        null=True,
                    ),
                ),
                (
                    "close_date",
                    models.IntegerField(
                        blank=True,
                        help_text="Point in time (Unix timestamp) when the poll will be automatically closed. Must be at least 5 and no more than 600 seconds in the future. Can't be used together with open_period.",
                        null=True,
                    ),
                ),
                (
                    "is_closed",
                    models.BooleanField(
                        blank=True,
                        help_text="Pass True if the poll needs to be immediately closed. This can be useful for poll preview.",
                        null=True,
                    ),
                ),
                (
                    "disable_notification",
                    models.BooleanField(
                        blank=True,
                        help_text="Sends the message silently. Users will receive a notification with no sound.",
                        null=True,
                    ),
                ),
                (
                    "protect_content",
                    models.BooleanField(
                        blank=True,
                        help_text="Protects the contents of the sent message from forwarding and saving",
                        null=True,
                    ),
                ),
                (
                    "allow_paid_broadcast",
                    models.BooleanField(
                        blank=True,
                        help_text="Pass True to allow up to 1000 messages per second, ignoring broadcasting limits for a fee of 0.1 Telegram Stars per message. The relevant Stars will be withdrawn from the bot's balance",
                        null=True,
                    ),
                ),
                (
                    "message_effect_id",
                    models.CharField(
                        blank=True,
                        help_text="Unique identifier of the message effect to be added to the message; for private chats only",
                        null=True,
                    ),
                ),
                ("object_id", models.PositiveIntegerField(blank=True, null=True)),
                (
                    "content_type",
                    models.ForeignKey(
                        blank=True,
                        help_text="Additional interface options. A JSON-serialized object for an inline keyboard, custom reply keyboard, instructions to remove a reply keyboard or to force a reply from the user",
                        limit_choices_to=models.Q(
                            ("model", "inlinekeyboardmarkup"),
                            ("model", "replykeyboardmarkup"),
                            ("model", "replykeyboardremove"),
                            ("model", "forcereply"),
                            _connector="OR",
                        ),
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="contenttypes.contenttype",
                    ),
                ),
            ],
            bases=("component.component",),
        ),
        migrations.CreateModel(
            name="SendSticker",
            fields=[
                (
                    "component_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="component.component",
                    ),
                ),
                (
                    "business_connection_id",
                    models.CharField(
                        blank=True,
                        help_text="Unique identifier of the business connection on behalf of which the message will be sent",
                        null=True,
                    ),
                ),
                (
                    "chat_id",
                    models.CharField(
                        blank=True,
                        help_text="Unique identifier for the target chat or username of the target channel (in the format @channelusername)",
                        null=True,
                    ),
                ),
                (
                    "message_thread_id",
                    models.IntegerField(
                        blank=True,
                        help_text="Unique identifier for the target message thread (topic) of the forum; for forum supergroups only",
                        null=True,
                    ),
                ),
                (
                    "sticker",
                    models.FileField(
                        blank=True,
                        help_text="Sticker to send. Pass a file_id as String to send a file that exists on the Telegram servers (recommended), pass an HTTP URL as a String for Telegram to get a .WEBP sticker from the Internet, or upload a new .WEBP, .TGS, or .WEBM sticker using multipart/form-data. More information on Sending Files ». Video and animated stickers can't be sent via an HTTP URL.",
                        null=True,
                        upload_to="sticker/",
                    ),
                ),
                (
                    "emoji",
                    models.CharField(
                        blank=True,
                        help_text="Emoji associated with the sticker; only for just uploaded stickers",
                        null=True,
                    ),
                ),
                (
                    "disable_notification",
                    models.BooleanField(
                        blank=True,
                        help_text="Sends the message silently. Users will receive a notification with no sound.",
                        null=True,
                    ),
                ),
                (
                    "protect_content",
                    models.BooleanField(
                        blank=True,
                        help_text="Protects the contents of the sent message from forwarding and saving",
                        null=True,
                    ),
                ),
                (
                    "allow_paid_broadcast",
                    models.BooleanField(
                        blank=True,
                        help_text="Pass True to allow up to 1000 messages per second, ignoring broadcasting limits for a fee of 0.1 Telegram Stars per message. The relevant Stars will be withdrawn from the bot's balance",
                        null=True,
                    ),
                ),
                (
                    "message_effect_id",
                    models.CharField(
                        blank=True,
                        help_text="Unique identifier of the message effect to be added to the message; for private chats only",
                        null=True,
                    ),
                ),
                ("object_id", models.PositiveIntegerField(blank=True, null=True)),
                (
                    "content_type",
                    models.ForeignKey(
                        blank=True,
                        help_text="Additional interface options. A JSON-serialized object for an inline keyboard, custom reply keyboard, instructions to remove a reply keyboard or to force a reply from the user",
                        limit_choices_to=models.Q(
                            ("model", "inlinekeyboardmarkup"),
                            ("model", "replykeyboardmarkup"),
                            ("model", "replykeyboardremove"),
                            ("model", "forcereply"),
                            _connector="OR",
                        ),
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="contenttypes.contenttype",
                    ),
                ),
            ],
            bases=("component.component",),
        ),
        migrations.CreateModel(
            name="SendVenue",
            fields=[
                (
                    "component_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="component.component",
                    ),
                ),
                (
                    "business_connection_id",
                    models.CharField(
                        blank=True,
                        help_text="Unique identifier of the business connection on behalf of which the message will be sent",
                        null=True,
                    ),
                ),
                (
                    "chat_id",
                    models.CharField(
                        blank=True,
                        help_text="Unique identifier for the target chat or username of the target channel (in the format @channelusername)",
                        null=True,
                    ),
                ),
                (
                    "message_thread_id",
                    models.IntegerField(
                        blank=True,
                        help_text="Unique identifier for the target message thread (topic) of the forum; for forum supergroups only",
                        null=True,
                    ),
                ),
                (
                    "latitude",
                    models.FloatField(
                        blank=True,
                        help_text="Latitude of the venue",
                        null=True,
                    ),
                ),
                (
                    "longitude",
                    models.FloatField(
                        blank=True,
                        help_text="Longitude of the venue",
                        null=True,
                    ),
                ),
                (
                    "title",
                    models.CharField(
                        blank=True,
                        help_text="Name of the venue",
                        null=True,
                    ),
                ),
                (
                    "address",
                    models.CharField(
                        blank=True,
                        help_text="Address of the venue",
                        null=True,
                    ),
                ),
                (
                    "foursquare_id",
                    models.CharField(
                        blank=True,
                        help_text="Foursquare identifier of the venue",
                        null=True,
                    ),
                ),
                (
                    "foursquare_type",
                    models.CharField(
                        blank=True,
                        help_text="Foursquare type of the venue, if known. (For example, “arts_entertainment/default”, “arts_entertainment/aquarium” or “food/icecream”.)",
                        null=True,
                    ),
                ),
                (
                    "google_place_id",
                    models.CharField(
                        blank=True,
                        help_text="Google Places identifier of the venue",
                        null=True,
                    ),
                ),
                (
                    "google_place_type",
                    models.CharField(
                        blank=True,
                        help_text="Google Places type of the venue. (See supported types.)",
                        null=True,
                    ),
                ),
                (
                    "disable_notification",
                    models.BooleanField(
                        blank=True,
                        help_text="Sends the message silently. Users will receive a notification with no sound.",
                        null=True,
                    ),
                ),
                (
                    "protect_content",
                    models.BooleanField(
                        blank=True,
                        help_text="Protects the contents of the sent message from forwarding and saving",
                        null=True,
                    ),
                ),
                (
                    "allow_paid_broadcast",
                    models.BooleanField(
                        blank=True,
                        help_text="Pass True to allow up to 1000 messages per second, ignoring broadcasting limits for a fee of 0.1 Telegram Stars per message. The relevant Stars will be withdrawn from the bot's balance",
                        null=True,
                    ),
                ),
                (
                    "message_effect_id",
                    models.CharField(
                        blank=True,
                        help_text="Unique identifier of the message effect to be added to the message; for private chats only",
                        null=True,
                    ),
                ),
                ("object_id", models.PositiveIntegerField(blank=True, null=True)),
                (
                    "content_type",
                    models.ForeignKey(
                        blank=True,
                        help_text="Additional interface options. A JSON-serialized object for an inline keyboard, custom reply keyboard, instructions to remove a reply keyboard or to force a reply from the user",
                        limit_choices_to=models.Q(
                            ("model", "inlinekeyboardmarkup"),
                            ("model", "replykeyboardmarkup"),
                            ("model", "replykeyboardremove"),
                            ("model", "forcereply"),
                            _connector="OR",
                        ),
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="contenttypes.contenttype",
                    ),
                ),
            ],
            bases=("component.component",),
        ),
        migrations.CreateModel(
            name="SendVideo",
            fields=[
                (
                    "component_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="component.component",
                    ),
                ),
                (
                    "business_connection_id",
                    models.CharField(
                        blank=True,
                        help_text="Unique identifier of the business connection on behalf of which the message will be sent",
                        null=True,
                    ),
                ),
                (
                    "chat_id",
                    models.CharField(
                        blank=True,
                        help_text="Unique identifier for the target chat or username of the target channel (in the format @channelusername)",
                        null=True,
                    ),
                ),
                (
                    "message_thread_id",
                    models.IntegerField(
                        blank=True,
                        help_text="Unique identifier for the target message thread (topic) of the forum; for forum supergroups only",
                        null=True,
                    ),
                ),
                (
                    "video",
                    models.FileField(
                        blank=True,
                        help_text="Video to send. Pass a file_id as String to send a video that exists on the Telegram servers (recommended), pass an HTTP URL as a String for Telegram to get a video from the Internet, or upload a new video using multipart/form-data. More information on Sending Files »",
                        null=True,
                        upload_to="video/",
                    ),
                ),
                (
                    "duration",
                    models.IntegerField(
                        blank=True,
                        help_text="Duration of sent video in seconds",
                        null=True,
                    ),
                ),
                (
                    "width",
                    models.IntegerField(blank=True, help_text="Video width", null=True),
                ),
                (
                    "height",
                    models.IntegerField(
                        blank=True,
                        help_text="Video height",
                        null=True,
                    ),
                ),
                (
                    "thumbnail",
                    models.FileField(
                        blank=True,
                        help_text="Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail's width and height should not exceed 320. Ignored if the file is not uploaded using multipart/form-data. Thumbnails can't be reused and can be only uploaded as a new file, so you can pass “attach://<file_attach_name>” if the thumbnail was uploaded using multipart/form-data under <file_attach_name>. More information on Sending Files »",
                        null=True,
                        upload_to="thumbnail/",
                    ),
                ),
                (
                    "cover",
                    models.FileField(
                        blank=True,
                        help_text="Cover for the video in the message. Pass a file_id to send a file that exists on the Telegram servers (recommended), pass an HTTP URL for Telegram to get a file from the Internet, or pass “attach://<file_attach_name>” to upload a new one using multipart/form-data under <file_attach_name> name. More information on Sending Files »",
                        null=True,
                        upload_to="cover/",
                    ),
                ),
                (
                    "start_timestamp",
                    models.IntegerField(
                        blank=True,
                        help_text="Start timestamp for the video in the message",
                        null=True,
                    ),
                ),
                (
                    "caption",
                    models.CharField(
                        blank=True,
                        help_text="Video caption (may also be used when resending videos by file_id), 0-1024 characters after entities parsing",
                        max_length=1024,
                        null=True,
                    ),
                ),
                (
                    "parse_mode",
                    models.CharField(
                        blank=True,
                        help_text="Mode for parsing entities in the video caption. See formatting options for more details.",
                        null=True,
                    ),
                ),
                (
                    "show_caption_above_media",
                    models.BooleanField(
                        blank=True,
                        help_text="Pass True, if the caption must be shown above the message media",
                        null=True,
                    ),
                ),
                (
                    "has_spoiler",
                    models.BooleanField(
                        blank=True,
                        help_text="Pass True if the video needs to be covered with a spoiler animation",
                        null=True,
                    ),
                ),
                (
                    "supports_streaming",
                    models.BooleanField(
                        blank=True,
                        help_text="Pass True if the uploaded video is suitable for streaming",
                        null=True,
                    ),
                ),
                (
                    "disable_notification",
                    models.BooleanField(
                        blank=True,
                        help_text="Sends the message silently. Users will receive a notification with no sound.",
                        null=True,
                    ),
                ),
                (
                    "protect_content",
                    models.BooleanField(
                        blank=True,
                        help_text="Protects the contents of the sent message from forwarding and saving",
                        null=True,
                    ),
                ),
                (
                    "allow_paid_broadcast",
                    models.BooleanField(
                        blank=True,
                        help_text="Pass True to allow up to 1000 messages per second, ignoring broadcasting limits for a fee of 0.1 Telegram Stars per message. The relevant Stars will be withdrawn from the bot's balance",
                        null=True,
                    ),
                ),
                (
                    "message_effect_id",
                    models.CharField(
                        blank=True,
                        help_text="Unique identifier of the message effect to be added to the message; for private chats only",
                        null=True,
                    ),
                ),
                ("object_id", models.PositiveIntegerField(blank=True, null=True)),
                (
                    "content_type",
                    models.ForeignKey(
                        blank=True,
                        help_text="Additional interface options. A JSON-serialized object for an inline keyboard, custom reply keyboard, instructions to remove a reply keyboard or to force a reply from the user",
                        limit_choices_to=models.Q(
                            ("model", "inlinekeyboardmarkup"),
                            ("model", "replykeyboardmarkup"),
                            ("model", "replykeyboardremove"),
                            ("model", "forcereply"),
                            _connector="OR",
                        ),
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="contenttypes.contenttype",
                    ),
                ),
            ],
            bases=("component.component",),
        ),
        migrations.CreateModel(
            name="SendVideoNote",
            fields=[
                (
                    "component_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="component.component",
                    ),
                ),
                (
                    "business_connection_id",
                    models.CharField(
                        blank=True,
                        help_text="Unique identifier of the business connection on behalf of which the message will be sent",
                        null=True,
                    ),
                ),
                (
                    "chat_id",
                    models.CharField(
                        blank=True,
                        help_text="Unique identifier for the target chat or username of the target channel (in the format @channelusername)",
                        null=True,
                    ),
                ),
                (
                    "message_thread_id",
                    models.IntegerField(
                        blank=True,
                        help_text="Unique identifier for the target message thread (topic) of the forum; for forum supergroups only",
                        null=True,
                    ),
                ),
                (
                    "video_note",
                    models.FileField(
                        blank=True,
                        help_text="Video note to send. Pass a file_id as String to send a video note that exists on the Telegram servers (recommended) or upload a new video using multipart/form-data. More information on Sending Files ». Sending video notes by a URL is currently unsupported",
                        null=True,
                        upload_to="video_note/",
                    ),
                ),
                (
                    "duration",
                    models.IntegerField(
                        blank=True,
                        help_text="Duration of sent video in seconds",
                        null=True,
                    ),
                ),
                (
                    "length",
                    models.IntegerField(
                        blank=True,
                        help_text="Video width and height, i.e. diameter of the video message",
                        null=True,
                    ),
                ),
                (
                    "thumbnail",
                    models.FileField(
                        blank=True,
                        help_text="Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail's width and height should not exceed 320. Ignored if the file is not uploaded using multipart/form-data. Thumbnails can't be reused and can be only uploaded as a new file, so you can pass “attach://<file_attach_name>” if the thumbnail was uploaded using multipart/form-data under <file_attach_name>. More information on Sending Files »",
                        null=True,
                        upload_to="thumbnail/",
                    ),
                ),
                (
                    "disable_notification",
                    models.BooleanField(
                        blank=True,
                        help_text="Sends the message silently. Users will receive a notification with no sound.",
                        null=True,
                    ),
                ),
                (
                    "protect_content",
                    models.BooleanField(
                        blank=True,
                        help_text="Protects the contents of the sent message from forwarding and saving",
                        null=True,
                    ),
                ),
                (
                    "allow_paid_broadcast",
                    models.BooleanField(
                        blank=True,
                        help_text="Pass True to allow up to 1000 messages per second, ignoring broadcasting limits for a fee of 0.1 Telegram Stars per message. The relevant Stars will be withdrawn from the bot's balance",
                        null=True,
                    ),
                ),
                (
                    "message_effect_id",
                    models.CharField(
                        blank=True,
                        help_text="Unique identifier of the message effect to be added to the message; for private chats only",
                        null=True,
                    ),
                ),
                ("object_id", models.PositiveIntegerField(blank=True, null=True)),
                (
                    "content_type",
                    models.ForeignKey(
                        blank=True,
                        help_text="Additional interface options. A JSON-serialized object for an inline keyboard, custom reply keyboard, instructions to remove a reply keyboard or to force a reply from the user",
                        limit_choices_to=models.Q(
                            ("model", "inlinekeyboardmarkup"),
                            ("model", "replykeyboardmarkup"),
                            ("model", "replykeyboardremove"),
                            ("model", "forcereply"),
                            _connector="OR",
                        ),
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="contenttypes.contenttype",
                    ),
                ),
            ],
            bases=("component.component",),
        ),
        migrations.CreateModel(
            name="SendVoice",
            fields=[
                (
                    "component_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="component.component",
                    ),
                ),
                (
                    "business_connection_id",
                    models.CharField(
                        blank=True,
                        help_text="Unique identifier of the business connection on behalf of which the message will be sent",
                        null=True,
                    ),
                ),
                (
                    "chat_id",
                    models.CharField(
                        blank=True,
                        help_text="Unique identifier for the target chat or username of the target channel (in the format @channelusername)",
                        null=True,
                    ),
                ),
                (
                    "message_thread_id",
                    models.IntegerField(
                        blank=True,
                        help_text="Unique identifier for the target message thread (topic) of the forum; for forum supergroups only",
                        null=True,
                    ),
                ),
                (
                    "voice",
                    models.FileField(
                        blank=True,
                        help_text="Audio file to send. Pass a file_id as String to send a file that exists on the Telegram servers (recommended), pass an HTTP URL as a String for Telegram to get a file from the Internet, or upload a new one using multipart/form-data. More information on Sending Files »",
                        null=True,
                        upload_to="voice/",
                    ),
                ),
                (
                    "caption",
                    models.CharField(
                        blank=True,
                        help_text="Voice message caption, 0-1024 characters after entities parsing",
                        max_length=1024,
                        null=True,
                    ),
                ),
                (
                    "parse_mode",
                    models.CharField(
                        blank=True,
                        help_text="Mode for parsing entities in the voice message caption. See formatting options for more details.",
                        null=True,
                    ),
                ),
                (
                    "duration",
                    models.IntegerField(
                        blank=True,
                        help_text="Duration of the voice message in seconds",
                        null=True,
                    ),
                ),
                (
                    "disable_notification",
                    models.BooleanField(
                        blank=True,
                        help_text="Sends the message silently. Users will receive a notification with no sound.",
                        null=True,
                    ),
                ),
                (
                    "protect_content",
                    models.BooleanField(
                        blank=True,
                        help_text="Protects the contents of the sent message from forwarding and saving",
                        null=True,
                    ),
                ),
                (
                    "allow_paid_broadcast",
                    models.BooleanField(
                        blank=True,
                        help_text="Pass True to allow up to 1000 messages per second, ignoring broadcasting limits for a fee of 0.1 Telegram Stars per message. The relevant Stars will be withdrawn from the bot's balance",
                        null=True,
                    ),
                ),
                (
                    "message_effect_id",
                    models.CharField(
                        blank=True,
                        help_text="Unique identifier of the message effect to be added to the message; for private chats only",
                        null=True,
                    ),
                ),
                ("object_id", models.PositiveIntegerField(blank=True, null=True)),
                (
                    "content_type",
                    models.ForeignKey(
                        blank=True,
                        help_text="Additional interface options. A JSON-serialized object for an inline keyboard, custom reply keyboard, instructions to remove a reply keyboard or to force a reply from the user",
                        limit_choices_to=models.Q(
                            ("model", "inlinekeyboardmarkup"),
                            ("model", "replykeyboardmarkup"),
                            ("model", "replykeyboardremove"),
                            ("model", "forcereply"),
                            _connector="OR",
                        ),
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="contenttypes.contenttype",
                    ),
                ),
            ],
            bases=("component.component",),
        ),
        migrations.CreateModel(
            name="StopMessageLiveLocation",
            fields=[
                (
                    "component_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="component.component",
                    ),
                ),
                (
                    "business_connection_id",
                    models.CharField(
                        blank=True,
                        help_text="Unique identifier of the business connection on behalf of which the message to be edited was sent",
                        null=True,
                    ),
                ),
                (
                    "chat_id",
                    models.CharField(
                        blank=True,
                        help_text="Required if inline_message_id is not specified. Unique identifier for the target chat or username of the target channel (in the format @channelusername)",
                        null=True,
                    ),
                ),
                (
                    "message_id",
                    models.IntegerField(
                        blank=True,
                        help_text="Required if inline_message_id is not specified. Identifier of the message with live location to stop",
                        null=True,
                    ),
                ),
                (
                    "inline_message_id",
                    models.CharField(
                        blank=True,
                        help_text="Required if chat_id and message_id are not specified. Identifier of the inline message",
                        null=True,
                    ),
                ),
                ("object_id", models.PositiveIntegerField(blank=True, null=True)),
                (
                    "content_type",
                    models.ForeignKey(
                        blank=True,
                        help_text="A JSON-serialized object for a new inline keyboard.",
                        limit_choices_to=models.Q(("model", "inlinekeyboardmarkup")),
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="contenttypes.contenttype",
                    ),
                ),
            ],
            bases=("component.component",),
        ),
        migrations.CreateModel(
            name="StopPoll",
            fields=[
                (
                    "component_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="component.component",
                    ),
                ),
                (
                    "business_connection_id",
                    models.CharField(
                        blank=True,
                        help_text="Unique identifier of the business connection on behalf of which the message to be edited was sent",
                        null=True,
                    ),
                ),
                (
                    "chat_id",
                    models.CharField(
                        blank=True,
                        help_text="Unique identifier for the target chat or username of the target channel (in the format @channelusername)",
                        null=True,
                    ),
                ),
                (
                    "message_id",
                    models.IntegerField(
                        blank=True,
                        help_text="Identifier of the original message with the poll",
                        null=True,
                    ),
                ),
                ("object_id", models.PositiveIntegerField(blank=True, null=True)),
                (
                    "content_type",
                    models.ForeignKey(
                        blank=True,
                        help_text="A JSON-serialized object for a new message inline keyboard.",
                        limit_choices_to=models.Q(("model", "inlinekeyboardmarkup")),
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="contenttypes.contenttype",
                    ),
                ),
            ],
            bases=("component.component",),
        ),
        migrations.CreateModel(
            name="SwitchComponent",
            fields=[
                (
                    "component_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="component.component",
                    ),
                ),
                (
                    "expression",
                    models.CharField(
                        help_text="Expression to evaluate",
                        max_length=1024,
                    ),
                ),
                (
                    "values",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(max_length=1024),
                        help_text="Values to evaluate",
                        size=None,
                    ),
                ),
                (
                    "next_components",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.IntegerField(),
                        size=None,
                    ),
                ),
            ],
            options={
                "constraints": [
                    models.CheckConstraint(
                        condition=models.Q(False),
                        name="check_next_components_length",
                    ),
                ],
            },
            bases=("component.component",),
        ),
        migrations.CreateModel(
            name="InlineKeyboardMarkup",
            fields=[
                (
                    "keyboard_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="component.keyboard",
                    ),
                ),
                (
                    "inline_keyboard",
                    models.ManyToManyField(
                        help_text="Array of button rows, each represented by an Array of InlineKeyboardButton objects",
                        related_name="inline_keyboards",
                        to="component.inlinekeyboardbutton",
                    ),
                ),
            ],
            bases=("component.keyboard",),
        ),
        migrations.CreateModel(
            name="ReplyKeyboardMarkup",
            fields=[
                (
                    "keyboard_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="component.keyboard",
                    ),
                ),
                (
                    "is_persistent",
                    models.BooleanField(
                        default=False,
                        help_text="Optional. Requests clients to always show the keyboard when the user opens the chat. Defaults to false, in which case the custom keyboard disappears after one use",
                    ),
                ),
                (
                    "resize_keyboard",
                    models.BooleanField(
                        default=False,
                        help_text="Requests clients to resize the keyboard vertically for optimal fit",
                    ),
                ),
                (
                    "one_time_keyboard",
                    models.BooleanField(
                        default=False,
                        help_text="Requests clients to hide the keyboard as soon as it's been used",
                    ),
                ),
                (
                    "input_field_placeholder",
                    models.CharField(
                        help_text="Optional. The placeholder to be shown in the input field when the keyboard is active; 1-64 characters, 0-words",
                        max_length=255,
                    ),
                ),
                (
                    "selective",
                    models.BooleanField(
                        default=False,
                        help_text="Optional. Use this parameter if you want to show the keyboard to specific users only. Targets: 1) users that are @mentioned in the text of the Message object; 2) if the bot's message is a reply to a message in the same chat and forum topic, sender of the original message.",
                    ),
                ),
                (
                    "keyboard",
                    models.ManyToManyField(
                        help_text="Array of button rows, each represented by an Array of KeyboardButton objects",
                        related_name="reply_keyboards",
                        to="component.keyboardbutton",
                    ),
                ),
            ],
            bases=("component.keyboard",),
        ),
    ]
